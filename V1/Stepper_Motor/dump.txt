/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "main.h"
#include "DMA.h"
#include "GPIO.h"

#define STEP_MODE_FULL_STEP 4
#define STEP_MODE_HALF_STEP 7

typedef struct Stepper_Motor_Typedef{

	uint8_t Step_Mode;

}Stepper_Motor_Typedef;



Stepper_Motor_Typedef Stepper_Motor_1;

uint32_t full_step[4];

uint32_t half_step[8];



uint8_t step = 0;

void TIM6_DAC_IRQHandler(void)
{
	TIM6 -> SR &= ~TIM_SR_UIF;



	if(Stepper_Motor_1.Step_Mode == STEP_MODE_HALF_STEP)
	{
		GPIOA -> BSRR = half_step[step];
		if(step > STEP_MODE_HALF_STEP){
			step = 0;
		}else {
			step += 1;
		}
	}
	else if(Stepper_Motor_1.Step_Mode == STEP_MODE_FULL_STEP)
	{
		GPIOA -> BSRR = full_step[step];
		if(step > STEP_MODE_FULL_STEP){
			step = 0;
		}else {
			step += 1;
		}
	}
}


void General_Timer_Update_Init(void)
{
	RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
	TIM6->PSC = 10000-1;
	TIM6->ARR = 8400-1;
	TIM6 -> EGR |= TIM_EGR_UG;
	TIM6->CR1 |= TIM_CR1_URS;
	TIM6->DIER |=  TIM_DIER_UIE;
	TIM6->CR1 |= TIM_CR1_CEN;
	NVIC_SetPriority(TIM6_DAC_IRQn,1);
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
}


int main(void)
{
	MCU_Clock_Setup();
	Delay_Config();

	full_step[0] = 0b11111111111111100000000000000001;
	full_step[1] = 0b11111111111110110000000000000100;
	full_step[2] = 0b11111111111111010000000000000010;
	full_step[3] = 0b11111111111101110000000000001000;

	half_step[0] = 0b11111111111111100000000000000001;
	half_step[1] = 0b11111111111110100000000000000101;
	half_step[2] = 0b11111111111110110000000000000100;
	half_step[3] = 0b11111111111110010000000000000110;
	half_step[4] = 0b11111111111111010000000000000010;
	half_step[5] = 0b11111111111101010000000000001010;
	half_step[6] = 0b11111111111101110000000000001000;
	half_step[7] = 0b11111111111101100000000000001001;


	Stepper_Motor_1.Step_Mode = STEP_MODE_HALF_STEP;

	// 1A
	GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);

	// 1B
	GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);

	// 2A
	GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);

	// 2B
	GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);



	General_Timer_Update_Init();


    /* Loop forever */
	for(;;)
	{

	}
}
