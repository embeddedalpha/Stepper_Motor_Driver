
Stepper_Motor_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020a4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800222c  0800222c  0000322c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002640  08002640  00004004  2**0
                  CONTENTS
  4 .ARM          00000000  08002640  08002640  00004004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002640  08002640  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002640  08002640  00003640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002644  08002644  00003644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08002648  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004004  2**0
                  CONTENTS
 10 .bss          000002ec  20000004  20000004  00004004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f0  200002f0  00004004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000496a  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000866  00000000  00000000  0000899e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  00009208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014b  00000000  00000000  000093c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000008e1  00000000  00000000  0000950b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002e7e  00000000  00000000  00009dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f19c  00000000  00000000  0000cc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009be06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005b4  00000000  00000000  0009be4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0009c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002214 	.word	0x08002214

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002214 	.word	0x08002214

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8000208:	4b54      	ldr	r3, [pc, #336]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d01a      	beq.n	800024a <DMA1_Stream0_IRQHandler+0x46>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000214:	4b52      	ldr	r3, [pc, #328]	@ (8000360 <DMA1_Stream0_IRQHandler+0x15c>)
 8000216:	2201      	movs	r2, #1
 8000218:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 800021a:	4b52      	ldr	r3, [pc, #328]	@ (8000364 <DMA1_Stream0_IRQHandler+0x160>)
 800021c:	2201      	movs	r2, #1
 800021e:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000220:	4b51      	ldr	r3, [pc, #324]	@ (8000368 <DMA1_Stream0_IRQHandler+0x164>)
 8000222:	2201      	movs	r2, #1
 8000224:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000226:	4b51      	ldr	r3, [pc, #324]	@ (800036c <DMA1_Stream0_IRQHandler+0x168>)
 8000228:	2201      	movs	r2, #1
 800022a:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 800022c:	4b50      	ldr	r3, [pc, #320]	@ (8000370 <DMA1_Stream0_IRQHandler+0x16c>)
 800022e:	2201      	movs	r2, #1
 8000230:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000232:	4b50      	ldr	r3, [pc, #320]	@ (8000374 <DMA1_Stream0_IRQHandler+0x170>)
 8000234:	2201      	movs	r2, #1
 8000236:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 8000238:	4b4f      	ldr	r3, [pc, #316]	@ (8000378 <DMA1_Stream0_IRQHandler+0x174>)
 800023a:	2201      	movs	r2, #1
 800023c:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 800023e:	4b47      	ldr	r3, [pc, #284]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	4a46      	ldr	r2, [pc, #280]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 8000244:	f043 0301 	orr.w	r3, r3, #1
 8000248:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 800024a:	4b44      	ldr	r3, [pc, #272]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f003 0304 	and.w	r3, r3, #4
 8000252:	2b00      	cmp	r3, #0
 8000254:	d01a      	beq.n	800028c <DMA1_Stream0_IRQHandler+0x88>
	{
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000256:	4b42      	ldr	r3, [pc, #264]	@ (8000360 <DMA1_Stream0_IRQHandler+0x15c>)
 8000258:	2201      	movs	r2, #1
 800025a:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 800025c:	4b41      	ldr	r3, [pc, #260]	@ (8000364 <DMA1_Stream0_IRQHandler+0x160>)
 800025e:	2201      	movs	r2, #1
 8000260:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000262:	4b41      	ldr	r3, [pc, #260]	@ (8000368 <DMA1_Stream0_IRQHandler+0x164>)
 8000264:	2201      	movs	r2, #1
 8000266:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000268:	4b40      	ldr	r3, [pc, #256]	@ (800036c <DMA1_Stream0_IRQHandler+0x168>)
 800026a:	2201      	movs	r2, #1
 800026c:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800026e:	4b40      	ldr	r3, [pc, #256]	@ (8000370 <DMA1_Stream0_IRQHandler+0x16c>)
 8000270:	2201      	movs	r2, #1
 8000272:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000274:	4b3f      	ldr	r3, [pc, #252]	@ (8000374 <DMA1_Stream0_IRQHandler+0x170>)
 8000276:	2201      	movs	r2, #1
 8000278:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 800027a:	4b3f      	ldr	r3, [pc, #252]	@ (8000378 <DMA1_Stream0_IRQHandler+0x174>)
 800027c:	2201      	movs	r2, #1
 800027e:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000280:	4b36      	ldr	r3, [pc, #216]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a35      	ldr	r2, [pc, #212]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF0)
 800028c:	4b33      	ldr	r3, [pc, #204]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 0308 	and.w	r3, r3, #8
 8000294:	2b00      	cmp	r3, #0
 8000296:	d01a      	beq.n	80002ce <DMA1_Stream0_IRQHandler+0xca>
	{
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 8000298:	4b31      	ldr	r3, [pc, #196]	@ (8000360 <DMA1_Stream0_IRQHandler+0x15c>)
 800029a:	2201      	movs	r2, #1
 800029c:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 800029e:	4b31      	ldr	r3, [pc, #196]	@ (8000364 <DMA1_Stream0_IRQHandler+0x160>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 80002a4:	4b30      	ldr	r3, [pc, #192]	@ (8000368 <DMA1_Stream0_IRQHandler+0x164>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 80002aa:	4b30      	ldr	r3, [pc, #192]	@ (800036c <DMA1_Stream0_IRQHandler+0x168>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 80002b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000370 <DMA1_Stream0_IRQHandler+0x16c>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 80002b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000374 <DMA1_Stream0_IRQHandler+0x170>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 80002bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000378 <DMA1_Stream0_IRQHandler+0x174>)
 80002be:	2201      	movs	r2, #1
 80002c0:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80002c2:	4b26      	ldr	r3, [pc, #152]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	4a25      	ldr	r2, [pc, #148]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF0)
 80002ce:	4b23      	ldr	r3, [pc, #140]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f003 0310 	and.w	r3, r3, #16
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d01a      	beq.n	8000310 <DMA1_Stream0_IRQHandler+0x10c>
	{
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002da:	4b21      	ldr	r3, [pc, #132]	@ (8000360 <DMA1_Stream0_IRQHandler+0x15c>)
 80002dc:	2201      	movs	r2, #1
 80002de:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002e0:	4b20      	ldr	r3, [pc, #128]	@ (8000364 <DMA1_Stream0_IRQHandler+0x160>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002e6:	4b20      	ldr	r3, [pc, #128]	@ (8000368 <DMA1_Stream0_IRQHandler+0x164>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002ec:	4b1f      	ldr	r3, [pc, #124]	@ (800036c <DMA1_Stream0_IRQHandler+0x168>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000370 <DMA1_Stream0_IRQHandler+0x16c>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000374 <DMA1_Stream0_IRQHandler+0x170>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 80002fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <DMA1_Stream0_IRQHandler+0x174>)
 8000300:	2201      	movs	r2, #1
 8000302:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000304:	4b15      	ldr	r3, [pc, #84]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4a14      	ldr	r2, [pc, #80]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 800030a:	f043 0310 	orr.w	r3, r3, #16
 800030e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF0)
 8000310:	4b12      	ldr	r3, [pc, #72]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f003 0320 	and.w	r3, r3, #32
 8000318:	2b00      	cmp	r3, #0
 800031a:	d01a      	beq.n	8000352 <DMA1_Stream0_IRQHandler+0x14e>
	{
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 800031c:	4b10      	ldr	r3, [pc, #64]	@ (8000360 <DMA1_Stream0_IRQHandler+0x15c>)
 800031e:	2201      	movs	r2, #1
 8000320:	701a      	strb	r2, [r3, #0]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000322:	4b10      	ldr	r3, [pc, #64]	@ (8000364 <DMA1_Stream0_IRQHandler+0x160>)
 8000324:	2201      	movs	r2, #1
 8000326:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000328:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <DMA1_Stream0_IRQHandler+0x164>)
 800032a:	2201      	movs	r2, #1
 800032c:	701a      	strb	r2, [r3, #0]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800032e:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <DMA1_Stream0_IRQHandler+0x168>)
 8000330:	2201      	movs	r2, #1
 8000332:	701a      	strb	r2, [r3, #0]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000334:	4b0e      	ldr	r3, [pc, #56]	@ (8000370 <DMA1_Stream0_IRQHandler+0x16c>)
 8000336:	2201      	movs	r2, #1
 8000338:	701a      	strb	r2, [r3, #0]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800033a:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <DMA1_Stream0_IRQHandler+0x170>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 8000340:	4b0d      	ldr	r3, [pc, #52]	@ (8000378 <DMA1_Stream0_IRQHandler+0x174>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000346:	4b05      	ldr	r3, [pc, #20]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	4a04      	ldr	r2, [pc, #16]	@ (800035c <DMA1_Stream0_IRQHandler+0x158>)
 800034c:	f043 0320 	orr.w	r3, r3, #32
 8000350:	6093      	str	r3, [r2, #8]
	}
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	40026000 	.word	0x40026000
 8000360:	200001c8 	.word	0x200001c8
 8000364:	200001a8 	.word	0x200001a8
 8000368:	200000e8 	.word	0x200000e8
 800036c:	200000c0 	.word	0x200000c0
 8000370:	20000038 	.word	0x20000038
 8000374:	20000068 	.word	0x20000068
 8000378:	20000210 	.word	0x20000210

0800037c <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 8000380:	4b45      	ldr	r3, [pc, #276]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000388:	2b00      	cmp	r3, #0
 800038a:	d014      	beq.n	80003b6 <DMA1_Stream1_IRQHandler+0x3a>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 800038c:	4b43      	ldr	r3, [pc, #268]	@ (800049c <DMA1_Stream1_IRQHandler+0x120>)
 800038e:	2201      	movs	r2, #1
 8000390:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000392:	4b43      	ldr	r3, [pc, #268]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x124>)
 8000394:	2201      	movs	r2, #1
 8000396:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000398:	4b42      	ldr	r3, [pc, #264]	@ (80004a4 <DMA1_Stream1_IRQHandler+0x128>)
 800039a:	2201      	movs	r2, #1
 800039c:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 800039e:	4b42      	ldr	r3, [pc, #264]	@ (80004a8 <DMA1_Stream1_IRQHandler+0x12c>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 80003a4:	4b41      	ldr	r3, [pc, #260]	@ (80004ac <DMA1_Stream1_IRQHandler+0x130>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80003aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 80003b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003b4:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 80003b6:	4b38      	ldr	r3, [pc, #224]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d014      	beq.n	80003ec <DMA1_Stream1_IRQHandler+0x70>
	{
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80003c2:	4b36      	ldr	r3, [pc, #216]	@ (800049c <DMA1_Stream1_IRQHandler+0x120>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80003c8:	4b35      	ldr	r3, [pc, #212]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x124>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80003ce:	4b35      	ldr	r3, [pc, #212]	@ (80004a4 <DMA1_Stream1_IRQHandler+0x128>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80003d4:	4b34      	ldr	r3, [pc, #208]	@ (80004a8 <DMA1_Stream1_IRQHandler+0x12c>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 80003da:	4b34      	ldr	r3, [pc, #208]	@ (80004ac <DMA1_Stream1_IRQHandler+0x130>)
 80003dc:	2201      	movs	r2, #1
 80003de:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80003e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	4a2c      	ldr	r2, [pc, #176]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 80003e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003ea:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF1)
 80003ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d014      	beq.n	8000422 <DMA1_Stream1_IRQHandler+0xa6>
	{
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80003f8:	4b28      	ldr	r3, [pc, #160]	@ (800049c <DMA1_Stream1_IRQHandler+0x120>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 80003fe:	4b28      	ldr	r3, [pc, #160]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x124>)
 8000400:	2201      	movs	r2, #1
 8000402:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000404:	4b27      	ldr	r3, [pc, #156]	@ (80004a4 <DMA1_Stream1_IRQHandler+0x128>)
 8000406:	2201      	movs	r2, #1
 8000408:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 800040a:	4b27      	ldr	r3, [pc, #156]	@ (80004a8 <DMA1_Stream1_IRQHandler+0x12c>)
 800040c:	2201      	movs	r2, #1
 800040e:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 8000410:	4b26      	ldr	r3, [pc, #152]	@ (80004ac <DMA1_Stream1_IRQHandler+0x130>)
 8000412:	2201      	movs	r2, #1
 8000414:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000416:	4b20      	ldr	r3, [pc, #128]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	4a1f      	ldr	r2, [pc, #124]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 800041c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000420:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF1)
 8000422:	4b1d      	ldr	r3, [pc, #116]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800042a:	2b00      	cmp	r3, #0
 800042c:	d014      	beq.n	8000458 <DMA1_Stream1_IRQHandler+0xdc>
	{
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800042e:	4b1b      	ldr	r3, [pc, #108]	@ (800049c <DMA1_Stream1_IRQHandler+0x120>)
 8000430:	2201      	movs	r2, #1
 8000432:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000434:	4b1a      	ldr	r3, [pc, #104]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x124>)
 8000436:	2201      	movs	r2, #1
 8000438:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <DMA1_Stream1_IRQHandler+0x128>)
 800043c:	2201      	movs	r2, #1
 800043e:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000440:	4b19      	ldr	r3, [pc, #100]	@ (80004a8 <DMA1_Stream1_IRQHandler+0x12c>)
 8000442:	2201      	movs	r2, #1
 8000444:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000446:	4b19      	ldr	r3, [pc, #100]	@ (80004ac <DMA1_Stream1_IRQHandler+0x130>)
 8000448:	2201      	movs	r2, #1
 800044a:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 800044c:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	4a11      	ldr	r2, [pc, #68]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 8000452:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000456:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF1)
 8000458:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000460:	2b00      	cmp	r3, #0
 8000462:	d014      	beq.n	800048e <DMA1_Stream1_IRQHandler+0x112>
	{
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000464:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <DMA1_Stream1_IRQHandler+0x120>)
 8000466:	2201      	movs	r2, #1
 8000468:	701a      	strb	r2, [r3, #0]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 800046a:	4b0d      	ldr	r3, [pc, #52]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x124>)
 800046c:	2201      	movs	r2, #1
 800046e:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <DMA1_Stream1_IRQHandler+0x128>)
 8000472:	2201      	movs	r2, #1
 8000474:	701a      	strb	r2, [r3, #0]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <DMA1_Stream1_IRQHandler+0x12c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 800047c:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <DMA1_Stream1_IRQHandler+0x130>)
 800047e:	2201      	movs	r2, #1
 8000480:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000482:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <DMA1_Stream1_IRQHandler+0x11c>)
 8000488:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800048c:	6093      	str	r3, [r2, #8]
	}
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	40026000 	.word	0x40026000
 800049c:	20000178 	.word	0x20000178
 80004a0:	200001d8 	.word	0x200001d8
 80004a4:	200000e0 	.word	0x200000e0
 80004a8:	200000a8 	.word	0x200000a8
 80004ac:	20000218 	.word	0x20000218

080004b0 <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 80004b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d00b      	beq.n	80004d8 <DMA1_Stream2_IRQHandler+0x28>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80004c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000578 <DMA1_Stream2_IRQHandler+0xc8>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 80004c6:	4b2d      	ldr	r3, [pc, #180]	@ (800057c <DMA1_Stream2_IRQHandler+0xcc>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80004cc:	4b29      	ldr	r3, [pc, #164]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	4a28      	ldr	r2, [pc, #160]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 80004d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004d6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 80004d8:	4b26      	ldr	r3, [pc, #152]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d00b      	beq.n	80004fc <DMA1_Stream2_IRQHandler+0x4c>
	{
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80004e4:	4b24      	ldr	r3, [pc, #144]	@ (8000578 <DMA1_Stream2_IRQHandler+0xc8>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 80004ea:	4b24      	ldr	r3, [pc, #144]	@ (800057c <DMA1_Stream2_IRQHandler+0xcc>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80004f0:	4b20      	ldr	r3, [pc, #128]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 80004f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004fa:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF2)
 80004fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000504:	2b00      	cmp	r3, #0
 8000506:	d00b      	beq.n	8000520 <DMA1_Stream2_IRQHandler+0x70>
	{
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000508:	4b1b      	ldr	r3, [pc, #108]	@ (8000578 <DMA1_Stream2_IRQHandler+0xc8>)
 800050a:	2201      	movs	r2, #1
 800050c:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 800050e:	4b1b      	ldr	r3, [pc, #108]	@ (800057c <DMA1_Stream2_IRQHandler+0xcc>)
 8000510:	2201      	movs	r2, #1
 8000512:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000514:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	4a16      	ldr	r2, [pc, #88]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 800051a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800051e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF2)
 8000520:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00b      	beq.n	8000544 <DMA1_Stream2_IRQHandler+0x94>
	{
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800052c:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <DMA1_Stream2_IRQHandler+0xc8>)
 800052e:	2201      	movs	r2, #1
 8000530:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8000532:	4b12      	ldr	r3, [pc, #72]	@ (800057c <DMA1_Stream2_IRQHandler+0xcc>)
 8000534:	2201      	movs	r2, #1
 8000536:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000538:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 800053e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000542:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF2)
 8000544:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00b      	beq.n	8000568 <DMA1_Stream2_IRQHandler+0xb8>
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000550:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <DMA1_Stream2_IRQHandler+0xc8>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <DMA1_Stream2_IRQHandler+0xcc>)
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	4a04      	ldr	r2, [pc, #16]	@ (8000574 <DMA1_Stream2_IRQHandler+0xc4>)
 8000562:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000566:	6093      	str	r3, [r2, #8]
	}
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40026000 	.word	0x40026000
 8000578:	200000b0 	.word	0x200000b0
 800057c:	20000220 	.word	0x20000220

08000580 <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 8000584:	4b54      	ldr	r3, [pc, #336]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d01a      	beq.n	80005c6 <DMA1_Stream3_IRQHandler+0x46>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000590:	4b52      	ldr	r3, [pc, #328]	@ (80006dc <DMA1_Stream3_IRQHandler+0x15c>)
 8000592:	2201      	movs	r2, #1
 8000594:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000596:	4b52      	ldr	r3, [pc, #328]	@ (80006e0 <DMA1_Stream3_IRQHandler+0x160>)
 8000598:	2201      	movs	r2, #1
 800059a:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 800059c:	4b51      	ldr	r3, [pc, #324]	@ (80006e4 <DMA1_Stream3_IRQHandler+0x164>)
 800059e:	2201      	movs	r2, #1
 80005a0:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80005a2:	4b51      	ldr	r3, [pc, #324]	@ (80006e8 <DMA1_Stream3_IRQHandler+0x168>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80005a8:	4b50      	ldr	r3, [pc, #320]	@ (80006ec <DMA1_Stream3_IRQHandler+0x16c>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80005ae:	4b50      	ldr	r3, [pc, #320]	@ (80006f0 <DMA1_Stream3_IRQHandler+0x170>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 80005b4:	4b4f      	ldr	r3, [pc, #316]	@ (80006f4 <DMA1_Stream3_IRQHandler+0x174>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80005ba:	4b47      	ldr	r3, [pc, #284]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	4a46      	ldr	r2, [pc, #280]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 80005c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005c4:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 80005c6:	4b44      	ldr	r3, [pc, #272]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d01a      	beq.n	8000608 <DMA1_Stream3_IRQHandler+0x88>
	{
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005d2:	4b42      	ldr	r3, [pc, #264]	@ (80006dc <DMA1_Stream3_IRQHandler+0x15c>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005d8:	4b41      	ldr	r3, [pc, #260]	@ (80006e0 <DMA1_Stream3_IRQHandler+0x160>)
 80005da:	2201      	movs	r2, #1
 80005dc:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005de:	4b41      	ldr	r3, [pc, #260]	@ (80006e4 <DMA1_Stream3_IRQHandler+0x164>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005e4:	4b40      	ldr	r3, [pc, #256]	@ (80006e8 <DMA1_Stream3_IRQHandler+0x168>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005ea:	4b40      	ldr	r3, [pc, #256]	@ (80006ec <DMA1_Stream3_IRQHandler+0x16c>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005f0:	4b3f      	ldr	r3, [pc, #252]	@ (80006f0 <DMA1_Stream3_IRQHandler+0x170>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 80005f6:	4b3f      	ldr	r3, [pc, #252]	@ (80006f4 <DMA1_Stream3_IRQHandler+0x174>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80005fc:	4b36      	ldr	r3, [pc, #216]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	4a35      	ldr	r2, [pc, #212]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 8000602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000606:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF3)
 8000608:	4b33      	ldr	r3, [pc, #204]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000610:	2b00      	cmp	r3, #0
 8000612:	d01a      	beq.n	800064a <DMA1_Stream3_IRQHandler+0xca>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000614:	4b31      	ldr	r3, [pc, #196]	@ (80006dc <DMA1_Stream3_IRQHandler+0x15c>)
 8000616:	2201      	movs	r2, #1
 8000618:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 800061a:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <DMA1_Stream3_IRQHandler+0x160>)
 800061c:	2201      	movs	r2, #1
 800061e:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000620:	4b30      	ldr	r3, [pc, #192]	@ (80006e4 <DMA1_Stream3_IRQHandler+0x164>)
 8000622:	2201      	movs	r2, #1
 8000624:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000626:	4b30      	ldr	r3, [pc, #192]	@ (80006e8 <DMA1_Stream3_IRQHandler+0x168>)
 8000628:	2201      	movs	r2, #1
 800062a:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 800062c:	4b2f      	ldr	r3, [pc, #188]	@ (80006ec <DMA1_Stream3_IRQHandler+0x16c>)
 800062e:	2201      	movs	r2, #1
 8000630:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000632:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <DMA1_Stream3_IRQHandler+0x170>)
 8000634:	2201      	movs	r2, #1
 8000636:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 8000638:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <DMA1_Stream3_IRQHandler+0x174>)
 800063a:	2201      	movs	r2, #1
 800063c:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	4a25      	ldr	r2, [pc, #148]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 8000644:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000648:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF3)
 800064a:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000652:	2b00      	cmp	r3, #0
 8000654:	d01a      	beq.n	800068c <DMA1_Stream3_IRQHandler+0x10c>
	{
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <DMA1_Stream3_IRQHandler+0x15c>)
 8000658:	2201      	movs	r2, #1
 800065a:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800065c:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <DMA1_Stream3_IRQHandler+0x160>)
 800065e:	2201      	movs	r2, #1
 8000660:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <DMA1_Stream3_IRQHandler+0x164>)
 8000664:	2201      	movs	r2, #1
 8000666:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <DMA1_Stream3_IRQHandler+0x168>)
 800066a:	2201      	movs	r2, #1
 800066c:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800066e:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <DMA1_Stream3_IRQHandler+0x16c>)
 8000670:	2201      	movs	r2, #1
 8000672:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000674:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <DMA1_Stream3_IRQHandler+0x170>)
 8000676:	2201      	movs	r2, #1
 8000678:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 800067a:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <DMA1_Stream3_IRQHandler+0x174>)
 800067c:	2201      	movs	r2, #1
 800067e:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	4a14      	ldr	r2, [pc, #80]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 8000686:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800068a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF3)
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d01a      	beq.n	80006ce <DMA1_Stream3_IRQHandler+0x14e>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000698:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <DMA1_Stream3_IRQHandler+0x15c>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <DMA1_Stream3_IRQHandler+0x160>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <DMA1_Stream3_IRQHandler+0x164>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <DMA1_Stream3_IRQHandler+0x168>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <DMA1_Stream3_IRQHandler+0x16c>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <DMA1_Stream3_IRQHandler+0x170>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <DMA1_Stream3_IRQHandler+0x174>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80006c2:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x158>)
 80006c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80006cc:	6093      	str	r3, [r2, #8]
	}
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	40026000 	.word	0x40026000
 80006dc:	200001d0 	.word	0x200001d0
 80006e0:	200001b0 	.word	0x200001b0
 80006e4:	200000e0 	.word	0x200000e0
 80006e8:	200000b0 	.word	0x200000b0
 80006ec:	20000020 	.word	0x20000020
 80006f0:	20000060 	.word	0x20000060
 80006f4:	20000228 	.word	0x20000228

080006f8 <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 80006fc:	4b54      	ldr	r3, [pc, #336]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d01a      	beq.n	800073e <DMA1_Stream4_IRQHandler+0x46>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000708:	4b52      	ldr	r3, [pc, #328]	@ (8000854 <DMA1_Stream4_IRQHandler+0x15c>)
 800070a:	2201      	movs	r2, #1
 800070c:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 800070e:	4b52      	ldr	r3, [pc, #328]	@ (8000858 <DMA1_Stream4_IRQHandler+0x160>)
 8000710:	2201      	movs	r2, #1
 8000712:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000714:	4b51      	ldr	r3, [pc, #324]	@ (800085c <DMA1_Stream4_IRQHandler+0x164>)
 8000716:	2201      	movs	r2, #1
 8000718:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800071a:	4b51      	ldr	r3, [pc, #324]	@ (8000860 <DMA1_Stream4_IRQHandler+0x168>)
 800071c:	2201      	movs	r2, #1
 800071e:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000720:	4b50      	ldr	r3, [pc, #320]	@ (8000864 <DMA1_Stream4_IRQHandler+0x16c>)
 8000722:	2201      	movs	r2, #1
 8000724:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000726:	4b50      	ldr	r3, [pc, #320]	@ (8000868 <DMA1_Stream4_IRQHandler+0x170>)
 8000728:	2201      	movs	r2, #1
 800072a:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 800072c:	4b4f      	ldr	r3, [pc, #316]	@ (800086c <DMA1_Stream4_IRQHandler+0x174>)
 800072e:	2201      	movs	r2, #1
 8000730:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8000732:	4b47      	ldr	r3, [pc, #284]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	4a46      	ldr	r2, [pc, #280]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 800073e:	4b44      	ldr	r3, [pc, #272]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	2b00      	cmp	r3, #0
 8000748:	d01a      	beq.n	8000780 <DMA1_Stream4_IRQHandler+0x88>
	{
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800074a:	4b42      	ldr	r3, [pc, #264]	@ (8000854 <DMA1_Stream4_IRQHandler+0x15c>)
 800074c:	2201      	movs	r2, #1
 800074e:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000750:	4b41      	ldr	r3, [pc, #260]	@ (8000858 <DMA1_Stream4_IRQHandler+0x160>)
 8000752:	2201      	movs	r2, #1
 8000754:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000756:	4b41      	ldr	r3, [pc, #260]	@ (800085c <DMA1_Stream4_IRQHandler+0x164>)
 8000758:	2201      	movs	r2, #1
 800075a:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800075c:	4b40      	ldr	r3, [pc, #256]	@ (8000860 <DMA1_Stream4_IRQHandler+0x168>)
 800075e:	2201      	movs	r2, #1
 8000760:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000762:	4b40      	ldr	r3, [pc, #256]	@ (8000864 <DMA1_Stream4_IRQHandler+0x16c>)
 8000764:	2201      	movs	r2, #1
 8000766:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000768:	4b3f      	ldr	r3, [pc, #252]	@ (8000868 <DMA1_Stream4_IRQHandler+0x170>)
 800076a:	2201      	movs	r2, #1
 800076c:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 800076e:	4b3f      	ldr	r3, [pc, #252]	@ (800086c <DMA1_Stream4_IRQHandler+0x174>)
 8000770:	2201      	movs	r2, #1
 8000772:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8000774:	4b36      	ldr	r3, [pc, #216]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	4a35      	ldr	r2, [pc, #212]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF4)
 8000780:	4b33      	ldr	r3, [pc, #204]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	2b00      	cmp	r3, #0
 800078a:	d01a      	beq.n	80007c2 <DMA1_Stream4_IRQHandler+0xca>
	{
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 800078c:	4b31      	ldr	r3, [pc, #196]	@ (8000854 <DMA1_Stream4_IRQHandler+0x15c>)
 800078e:	2201      	movs	r2, #1
 8000790:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000792:	4b31      	ldr	r3, [pc, #196]	@ (8000858 <DMA1_Stream4_IRQHandler+0x160>)
 8000794:	2201      	movs	r2, #1
 8000796:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000798:	4b30      	ldr	r3, [pc, #192]	@ (800085c <DMA1_Stream4_IRQHandler+0x164>)
 800079a:	2201      	movs	r2, #1
 800079c:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800079e:	4b30      	ldr	r3, [pc, #192]	@ (8000860 <DMA1_Stream4_IRQHandler+0x168>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80007a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000864 <DMA1_Stream4_IRQHandler+0x16c>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80007aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000868 <DMA1_Stream4_IRQHandler+0x170>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 80007b0:	4b2e      	ldr	r3, [pc, #184]	@ (800086c <DMA1_Stream4_IRQHandler+0x174>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80007b6:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	4a25      	ldr	r2, [pc, #148]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF4)
 80007c2:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d01a      	beq.n	8000804 <DMA1_Stream4_IRQHandler+0x10c>
	{
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007ce:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <DMA1_Stream4_IRQHandler+0x15c>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007d4:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <DMA1_Stream4_IRQHandler+0x160>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007da:	4b20      	ldr	r3, [pc, #128]	@ (800085c <DMA1_Stream4_IRQHandler+0x164>)
 80007dc:	2201      	movs	r2, #1
 80007de:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <DMA1_Stream4_IRQHandler+0x168>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <DMA1_Stream4_IRQHandler+0x16c>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <DMA1_Stream4_IRQHandler+0x170>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 80007f2:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <DMA1_Stream4_IRQHandler+0x174>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF4)
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f003 0320 	and.w	r3, r3, #32
 800080c:	2b00      	cmp	r3, #0
 800080e:	d01a      	beq.n	8000846 <DMA1_Stream4_IRQHandler+0x14e>
	{
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000810:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <DMA1_Stream4_IRQHandler+0x15c>)
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <DMA1_Stream4_IRQHandler+0x160>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <DMA1_Stream4_IRQHandler+0x164>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <DMA1_Stream4_IRQHandler+0x168>)
 8000824:	2201      	movs	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <DMA1_Stream4_IRQHandler+0x16c>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <DMA1_Stream4_IRQHandler+0x170>)
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 8000834:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <DMA1_Stream4_IRQHandler+0x174>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <DMA1_Stream4_IRQHandler+0x158>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	60d3      	str	r3, [r2, #12]
	}
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40026000 	.word	0x40026000
 8000854:	200001c0 	.word	0x200001c0
 8000858:	20000188 	.word	0x20000188
 800085c:	200000b8 	.word	0x200000b8
 8000860:	20000050 	.word	0x20000050
 8000864:	20000028 	.word	0x20000028
 8000868:	20000078 	.word	0x20000078
 800086c:	20000230 	.word	0x20000230

08000870 <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 8000874:	4b54      	ldr	r3, [pc, #336]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800087c:	2b00      	cmp	r3, #0
 800087e:	d01a      	beq.n	80008b6 <DMA1_Stream5_IRQHandler+0x46>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000880:	4b52      	ldr	r3, [pc, #328]	@ (80009cc <DMA1_Stream5_IRQHandler+0x15c>)
 8000882:	2201      	movs	r2, #1
 8000884:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000886:	4b52      	ldr	r3, [pc, #328]	@ (80009d0 <DMA1_Stream5_IRQHandler+0x160>)
 8000888:	2201      	movs	r2, #1
 800088a:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 800088c:	4b51      	ldr	r3, [pc, #324]	@ (80009d4 <DMA1_Stream5_IRQHandler+0x164>)
 800088e:	2201      	movs	r2, #1
 8000890:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 8000892:	4b51      	ldr	r3, [pc, #324]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x168>)
 8000894:	2201      	movs	r2, #1
 8000896:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000898:	4b50      	ldr	r3, [pc, #320]	@ (80009dc <DMA1_Stream5_IRQHandler+0x16c>)
 800089a:	2201      	movs	r2, #1
 800089c:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 800089e:	4b50      	ldr	r3, [pc, #320]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x170>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 80008a4:	4b4f      	ldr	r3, [pc, #316]	@ (80009e4 <DMA1_Stream5_IRQHandler+0x174>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80008aa:	4b47      	ldr	r3, [pc, #284]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	4a46      	ldr	r2, [pc, #280]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 80008b6:	4b44      	ldr	r3, [pc, #272]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d01a      	beq.n	80008f8 <DMA1_Stream5_IRQHandler+0x88>
	{
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80008c2:	4b42      	ldr	r3, [pc, #264]	@ (80009cc <DMA1_Stream5_IRQHandler+0x15c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80008c8:	4b41      	ldr	r3, [pc, #260]	@ (80009d0 <DMA1_Stream5_IRQHandler+0x160>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 80008ce:	4b41      	ldr	r3, [pc, #260]	@ (80009d4 <DMA1_Stream5_IRQHandler+0x164>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80008d4:	4b40      	ldr	r3, [pc, #256]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x168>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80008da:	4b40      	ldr	r3, [pc, #256]	@ (80009dc <DMA1_Stream5_IRQHandler+0x16c>)
 80008dc:	2201      	movs	r2, #1
 80008de:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80008e0:	4b3f      	ldr	r3, [pc, #252]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x170>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 80008e6:	4b3f      	ldr	r3, [pc, #252]	@ (80009e4 <DMA1_Stream5_IRQHandler+0x174>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80008ec:	4b36      	ldr	r3, [pc, #216]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	4a35      	ldr	r2, [pc, #212]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 80008f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008f6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF5)
 80008f8:	4b33      	ldr	r3, [pc, #204]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000900:	2b00      	cmp	r3, #0
 8000902:	d01a      	beq.n	800093a <DMA1_Stream5_IRQHandler+0xca>
	{
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000904:	4b31      	ldr	r3, [pc, #196]	@ (80009cc <DMA1_Stream5_IRQHandler+0x15c>)
 8000906:	2201      	movs	r2, #1
 8000908:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 800090a:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <DMA1_Stream5_IRQHandler+0x160>)
 800090c:	2201      	movs	r2, #1
 800090e:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 8000910:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <DMA1_Stream5_IRQHandler+0x164>)
 8000912:	2201      	movs	r2, #1
 8000914:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 8000916:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x168>)
 8000918:	2201      	movs	r2, #1
 800091a:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 800091c:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <DMA1_Stream5_IRQHandler+0x16c>)
 800091e:	2201      	movs	r2, #1
 8000920:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000922:	4b2f      	ldr	r3, [pc, #188]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x170>)
 8000924:	2201      	movs	r2, #1
 8000926:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 8000928:	4b2e      	ldr	r3, [pc, #184]	@ (80009e4 <DMA1_Stream5_IRQHandler+0x174>)
 800092a:	2201      	movs	r2, #1
 800092c:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800092e:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	4a25      	ldr	r2, [pc, #148]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 8000934:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000938:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF5)
 800093a:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000942:	2b00      	cmp	r3, #0
 8000944:	d01a      	beq.n	800097c <DMA1_Stream5_IRQHandler+0x10c>
	{
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000946:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <DMA1_Stream5_IRQHandler+0x15c>)
 8000948:	2201      	movs	r2, #1
 800094a:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800094c:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <DMA1_Stream5_IRQHandler+0x160>)
 800094e:	2201      	movs	r2, #1
 8000950:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8000952:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <DMA1_Stream5_IRQHandler+0x164>)
 8000954:	2201      	movs	r2, #1
 8000956:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x168>)
 800095a:	2201      	movs	r2, #1
 800095c:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800095e:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <DMA1_Stream5_IRQHandler+0x16c>)
 8000960:	2201      	movs	r2, #1
 8000962:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000964:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x170>)
 8000966:	2201      	movs	r2, #1
 8000968:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 800096a:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <DMA1_Stream5_IRQHandler+0x174>)
 800096c:	2201      	movs	r2, #1
 800096e:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8000970:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	4a14      	ldr	r2, [pc, #80]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 8000976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800097a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF5)
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000984:	2b00      	cmp	r3, #0
 8000986:	d01a      	beq.n	80009be <DMA1_Stream5_IRQHandler+0x14e>
	{
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000988:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <DMA1_Stream5_IRQHandler+0x15c>)
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <DMA1_Stream5_IRQHandler+0x160>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <DMA1_Stream5_IRQHandler+0x164>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x168>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <DMA1_Stream5_IRQHandler+0x16c>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x170>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 80009ac:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <DMA1_Stream5_IRQHandler+0x174>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	4a04      	ldr	r2, [pc, #16]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x158>)
 80009b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009bc:	60d3      	str	r3, [r2, #12]
	}
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	40026000 	.word	0x40026000
 80009cc:	20000080 	.word	0x20000080
 80009d0:	200001a0 	.word	0x200001a0
 80009d4:	20000168 	.word	0x20000168
 80009d8:	200001e0 	.word	0x200001e0
 80009dc:	20000190 	.word	0x20000190
 80009e0:	20000098 	.word	0x20000098
 80009e4:	20000238 	.word	0x20000238

080009e8 <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 80009ec:	4b47      	ldr	r3, [pc, #284]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d017      	beq.n	8000a28 <DMA1_Stream6_IRQHandler+0x40>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80009f8:	4b45      	ldr	r3, [pc, #276]	@ (8000b10 <DMA1_Stream6_IRQHandler+0x128>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	711a      	strb	r2, [r3, #4]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 80009fe:	4b45      	ldr	r3, [pc, #276]	@ (8000b14 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000a04:	4b44      	ldr	r3, [pc, #272]	@ (8000b18 <DMA1_Stream6_IRQHandler+0x130>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 8000a0a:	4b44      	ldr	r3, [pc, #272]	@ (8000b1c <DMA1_Stream6_IRQHandler+0x134>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000a10:	4b43      	ldr	r3, [pc, #268]	@ (8000b20 <DMA1_Stream6_IRQHandler+0x138>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 8000a16:	4b43      	ldr	r3, [pc, #268]	@ (8000b24 <DMA1_Stream6_IRQHandler+0x13c>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	4a3a      	ldr	r2, [pc, #232]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a26:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 8000a28:	4b38      	ldr	r3, [pc, #224]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d014      	beq.n	8000a5e <DMA1_Stream6_IRQHandler+0x76>
	{
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000a34:	4b37      	ldr	r3, [pc, #220]	@ (8000b14 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000a3a:	4b37      	ldr	r3, [pc, #220]	@ (8000b18 <DMA1_Stream6_IRQHandler+0x130>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8000a40:	4b36      	ldr	r3, [pc, #216]	@ (8000b1c <DMA1_Stream6_IRQHandler+0x134>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000a46:	4b36      	ldr	r3, [pc, #216]	@ (8000b20 <DMA1_Stream6_IRQHandler+0x138>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8000a4c:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <DMA1_Stream6_IRQHandler+0x13c>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000a52:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4a2d      	ldr	r2, [pc, #180]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a5c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF6)
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d014      	beq.n	8000a94 <DMA1_Stream6_IRQHandler+0xac>
	{
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b14 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000a70:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <DMA1_Stream6_IRQHandler+0x130>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 8000a76:	4b29      	ldr	r3, [pc, #164]	@ (8000b1c <DMA1_Stream6_IRQHandler+0x134>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000a7c:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <DMA1_Stream6_IRQHandler+0x138>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 8000a82:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <DMA1_Stream6_IRQHandler+0x13c>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000a88:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000a8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a92:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF6)
 8000a94:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d014      	beq.n	8000aca <DMA1_Stream6_IRQHandler+0xe2>
	{
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <DMA1_Stream6_IRQHandler+0x12c>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <DMA1_Stream6_IRQHandler+0x130>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <DMA1_Stream6_IRQHandler+0x134>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <DMA1_Stream6_IRQHandler+0x138>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <DMA1_Stream6_IRQHandler+0x13c>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000ac4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ac8:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF6)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d014      	beq.n	8000b00 <DMA1_Stream6_IRQHandler+0x118>
	{
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <DMA1_Stream6_IRQHandler+0x12c>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <DMA1_Stream6_IRQHandler+0x130>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <DMA1_Stream6_IRQHandler+0x134>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <DMA1_Stream6_IRQHandler+0x138>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <DMA1_Stream6_IRQHandler+0x13c>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x124>)
 8000afa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000afe:	60d3      	str	r3, [r2, #12]
	}
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40026000 	.word	0x40026000
 8000b10:	20000198 	.word	0x20000198
 8000b14:	20000160 	.word	0x20000160
 8000b18:	200000e8 	.word	0x200000e8
 8000b1c:	200000a0 	.word	0x200000a0
 8000b20:	20000040 	.word	0x20000040
 8000b24:	20000240 	.word	0x20000240

08000b28 <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 8000b2c:	4b54      	ldr	r3, [pc, #336]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d01a      	beq.n	8000b6e <DMA1_Stream7_IRQHandler+0x46>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b38:	4b52      	ldr	r3, [pc, #328]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x15c>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b3e:	4b52      	ldr	r3, [pc, #328]	@ (8000c88 <DMA1_Stream7_IRQHandler+0x160>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b44:	4b51      	ldr	r3, [pc, #324]	@ (8000c8c <DMA1_Stream7_IRQHandler+0x164>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000b4a:	4b51      	ldr	r3, [pc, #324]	@ (8000c90 <DMA1_Stream7_IRQHandler+0x168>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000b50:	4b50      	ldr	r3, [pc, #320]	@ (8000c94 <DMA1_Stream7_IRQHandler+0x16c>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8000b56:	4b50      	ldr	r3, [pc, #320]	@ (8000c98 <DMA1_Stream7_IRQHandler+0x170>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	711a      	strb	r2, [r3, #4]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 8000b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8000c9c <DMA1_Stream7_IRQHandler+0x174>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000b62:	4b47      	ldr	r3, [pc, #284]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	4a46      	ldr	r2, [pc, #280]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000b68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b6c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 8000b6e:	4b44      	ldr	r3, [pc, #272]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d01a      	beq.n	8000bb0 <DMA1_Stream7_IRQHandler+0x88>
	{
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b7a:	4b42      	ldr	r3, [pc, #264]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x15c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b80:	4b41      	ldr	r3, [pc, #260]	@ (8000c88 <DMA1_Stream7_IRQHandler+0x160>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b86:	4b41      	ldr	r3, [pc, #260]	@ (8000c8c <DMA1_Stream7_IRQHandler+0x164>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b8c:	4b40      	ldr	r3, [pc, #256]	@ (8000c90 <DMA1_Stream7_IRQHandler+0x168>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b92:	4b40      	ldr	r3, [pc, #256]	@ (8000c94 <DMA1_Stream7_IRQHandler+0x16c>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b98:	4b3f      	ldr	r3, [pc, #252]	@ (8000c98 <DMA1_Stream7_IRQHandler+0x170>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8000b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c9c <DMA1_Stream7_IRQHandler+0x174>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000ba4:	4b36      	ldr	r3, [pc, #216]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	4a35      	ldr	r2, [pc, #212]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bae:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF7)
 8000bb0:	4b33      	ldr	r3, [pc, #204]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d01a      	beq.n	8000bf2 <DMA1_Stream7_IRQHandler+0xca>
	{
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000bbc:	4b31      	ldr	r3, [pc, #196]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x15c>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000bc2:	4b31      	ldr	r3, [pc, #196]	@ (8000c88 <DMA1_Stream7_IRQHandler+0x160>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	@ (8000c8c <DMA1_Stream7_IRQHandler+0x164>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8000bce:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <DMA1_Stream7_IRQHandler+0x168>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c94 <DMA1_Stream7_IRQHandler+0x16c>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8000bda:	4b2f      	ldr	r3, [pc, #188]	@ (8000c98 <DMA1_Stream7_IRQHandler+0x170>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 8000be0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c9c <DMA1_Stream7_IRQHandler+0x174>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000be6:	4b26      	ldr	r3, [pc, #152]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	4a25      	ldr	r2, [pc, #148]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF7)
 8000bf2:	4b23      	ldr	r3, [pc, #140]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d01a      	beq.n	8000c34 <DMA1_Stream7_IRQHandler+0x10c>
	{
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x15c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c04:	4b20      	ldr	r3, [pc, #128]	@ (8000c88 <DMA1_Stream7_IRQHandler+0x160>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <DMA1_Stream7_IRQHandler+0x164>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <DMA1_Stream7_IRQHandler+0x168>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <DMA1_Stream7_IRQHandler+0x16c>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <DMA1_Stream7_IRQHandler+0x170>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <DMA1_Stream7_IRQHandler+0x174>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4a14      	ldr	r2, [pc, #80]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000c2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c32:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d01a      	beq.n	8000c76 <DMA1_Stream7_IRQHandler+0x14e>
	{
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c40:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x15c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <DMA1_Stream7_IRQHandler+0x160>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <DMA1_Stream7_IRQHandler+0x164>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <DMA1_Stream7_IRQHandler+0x168>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <DMA1_Stream7_IRQHandler+0x16c>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <DMA1_Stream7_IRQHandler+0x170>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 8000c64:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <DMA1_Stream7_IRQHandler+0x174>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000c6a:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x158>)
 8000c70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c74:	60d3      	str	r3, [r2, #12]
	}
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40026000 	.word	0x40026000
 8000c84:	20000030 	.word	0x20000030
 8000c88:	20000048 	.word	0x20000048
 8000c8c:	200000c8 	.word	0x200000c8
 8000c90:	200001b8 	.word	0x200001b8
 8000c94:	20000170 	.word	0x20000170
 8000c98:	20000180 	.word	0x20000180
 8000c9c:	20000248 	.word	0x20000248

08000ca0 <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 8000ca4:	4b45      	ldr	r3, [pc, #276]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d014      	beq.n	8000cda <DMA2_Stream0_IRQHandler+0x3a>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000cb0:	4b43      	ldr	r3, [pc, #268]	@ (8000dc0 <DMA2_Stream0_IRQHandler+0x120>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 8000cb6:	4b43      	ldr	r3, [pc, #268]	@ (8000dc4 <DMA2_Stream0_IRQHandler+0x124>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000cbc:	4b42      	ldr	r3, [pc, #264]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x128>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000cc2:	4b42      	ldr	r3, [pc, #264]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x12c>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8000cc8:	4b41      	ldr	r3, [pc, #260]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x130>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000cce:	4b3b      	ldr	r3, [pc, #236]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	4a3a      	ldr	r2, [pc, #232]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 8000cda:	4b38      	ldr	r3, [pc, #224]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d014      	beq.n	8000d10 <DMA2_Stream0_IRQHandler+0x70>
	{
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000ce6:	4b36      	ldr	r3, [pc, #216]	@ (8000dc0 <DMA2_Stream0_IRQHandler+0x120>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000cec:	4b35      	ldr	r3, [pc, #212]	@ (8000dc4 <DMA2_Stream0_IRQHandler+0x124>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000cf2:	4b35      	ldr	r3, [pc, #212]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x128>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000cf8:	4b34      	ldr	r3, [pc, #208]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x12c>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000cfe:	4b34      	ldr	r3, [pc, #208]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x130>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000d04:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	4a2c      	ldr	r2, [pc, #176]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF0)
 8000d10:	4b2a      	ldr	r3, [pc, #168]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d014      	beq.n	8000d46 <DMA2_Stream0_IRQHandler+0xa6>
	{
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000d1c:	4b28      	ldr	r3, [pc, #160]	@ (8000dc0 <DMA2_Stream0_IRQHandler+0x120>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 8000d22:	4b28      	ldr	r3, [pc, #160]	@ (8000dc4 <DMA2_Stream0_IRQHandler+0x124>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000d28:	4b27      	ldr	r3, [pc, #156]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x128>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000d2e:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x12c>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 8000d34:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x130>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000d3a:	4b20      	ldr	r3, [pc, #128]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF0)
 8000d46:	4b1d      	ldr	r3, [pc, #116]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d014      	beq.n	8000d7c <DMA2_Stream0_IRQHandler+0xdc>
	{
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <DMA2_Stream0_IRQHandler+0x120>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <DMA2_Stream0_IRQHandler+0x124>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x128>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x12c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x130>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4a11      	ldr	r2, [pc, #68]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0320 	and.w	r3, r3, #32
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d014      	beq.n	8000db2 <DMA2_Stream0_IRQHandler+0x112>
	{
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <DMA2_Stream0_IRQHandler+0x120>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <DMA2_Stream0_IRQHandler+0x124>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x128>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x12c>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x130>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000da6:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <DMA2_Stream0_IRQHandler+0x11c>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	6093      	str	r3, [r2, #8]
	}
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40026400 	.word	0x40026400
 8000dc0:	20000058 	.word	0x20000058
 8000dc4:	200001f8 	.word	0x200001f8
 8000dc8:	20000118 	.word	0x20000118
 8000dcc:	20000120 	.word	0x20000120
 8000dd0:	20000250 	.word	0x20000250

08000dd4 <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 8000dd8:	4b5c      	ldr	r3, [pc, #368]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d01d      	beq.n	8000e20 <DMA2_Stream1_IRQHandler+0x4c>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 8000de4:	4b5a      	ldr	r3, [pc, #360]	@ (8000f50 <DMA2_Stream1_IRQHandler+0x17c>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000dea:	4b5a      	ldr	r3, [pc, #360]	@ (8000f54 <DMA2_Stream1_IRQHandler+0x180>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000df0:	4b59      	ldr	r3, [pc, #356]	@ (8000f58 <DMA2_Stream1_IRQHandler+0x184>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000df6:	4b59      	ldr	r3, [pc, #356]	@ (8000f5c <DMA2_Stream1_IRQHandler+0x188>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000dfc:	4b58      	ldr	r3, [pc, #352]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x18c>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 8000e02:	4b58      	ldr	r3, [pc, #352]	@ (8000f64 <DMA2_Stream1_IRQHandler+0x190>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000e08:	4b57      	ldr	r3, [pc, #348]	@ (8000f68 <DMA2_Stream1_IRQHandler+0x194>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 8000e0e:	4b57      	ldr	r3, [pc, #348]	@ (8000f6c <DMA2_Stream1_IRQHandler+0x198>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000e14:	4b4d      	ldr	r3, [pc, #308]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4a4c      	ldr	r2, [pc, #304]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e1e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 8000e20:	4b4a      	ldr	r3, [pc, #296]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d01d      	beq.n	8000e68 <DMA2_Stream1_IRQHandler+0x94>
	{
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e2c:	4b48      	ldr	r3, [pc, #288]	@ (8000f50 <DMA2_Stream1_IRQHandler+0x17c>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e32:	4b48      	ldr	r3, [pc, #288]	@ (8000f54 <DMA2_Stream1_IRQHandler+0x180>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e38:	4b47      	ldr	r3, [pc, #284]	@ (8000f58 <DMA2_Stream1_IRQHandler+0x184>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e3e:	4b47      	ldr	r3, [pc, #284]	@ (8000f5c <DMA2_Stream1_IRQHandler+0x188>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e44:	4b46      	ldr	r3, [pc, #280]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x18c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e4a:	4b46      	ldr	r3, [pc, #280]	@ (8000f64 <DMA2_Stream1_IRQHandler+0x190>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e50:	4b45      	ldr	r3, [pc, #276]	@ (8000f68 <DMA2_Stream1_IRQHandler+0x194>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000e56:	4b45      	ldr	r3, [pc, #276]	@ (8000f6c <DMA2_Stream1_IRQHandler+0x198>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	4a3a      	ldr	r2, [pc, #232]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e66:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF1)
 8000e68:	4b38      	ldr	r3, [pc, #224]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d01d      	beq.n	8000eb0 <DMA2_Stream1_IRQHandler+0xdc>
	{
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 8000e74:	4b36      	ldr	r3, [pc, #216]	@ (8000f50 <DMA2_Stream1_IRQHandler+0x17c>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000e7a:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <DMA2_Stream1_IRQHandler+0x180>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000e80:	4b35      	ldr	r3, [pc, #212]	@ (8000f58 <DMA2_Stream1_IRQHandler+0x184>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000e86:	4b35      	ldr	r3, [pc, #212]	@ (8000f5c <DMA2_Stream1_IRQHandler+0x188>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000e8c:	4b34      	ldr	r3, [pc, #208]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x18c>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 8000e92:	4b34      	ldr	r3, [pc, #208]	@ (8000f64 <DMA2_Stream1_IRQHandler+0x190>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000e98:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <DMA2_Stream1_IRQHandler+0x194>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 8000e9e:	4b33      	ldr	r3, [pc, #204]	@ (8000f6c <DMA2_Stream1_IRQHandler+0x198>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000ea4:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4a28      	ldr	r2, [pc, #160]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000eaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eae:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8000eb0:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d01d      	beq.n	8000ef8 <DMA2_Stream1_IRQHandler+0x124>
	{
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	@ (8000f50 <DMA2_Stream1_IRQHandler+0x17c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ec2:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <DMA2_Stream1_IRQHandler+0x180>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ec8:	4b23      	ldr	r3, [pc, #140]	@ (8000f58 <DMA2_Stream1_IRQHandler+0x184>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <DMA2_Stream1_IRQHandler+0x188>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x18c>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000eda:	4b22      	ldr	r3, [pc, #136]	@ (8000f64 <DMA2_Stream1_IRQHandler+0x190>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ee0:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <DMA2_Stream1_IRQHandler+0x194>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <DMA2_Stream1_IRQHandler+0x198>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000eec:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	4a16      	ldr	r2, [pc, #88]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d01d      	beq.n	8000f40 <DMA2_Stream1_IRQHandler+0x16c>
	{
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <DMA2_Stream1_IRQHandler+0x17c>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <DMA2_Stream1_IRQHandler+0x180>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <DMA2_Stream1_IRQHandler+0x184>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <DMA2_Stream1_IRQHandler+0x188>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x18c>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <DMA2_Stream1_IRQHandler+0x190>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <DMA2_Stream1_IRQHandler+0x194>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <DMA2_Stream1_IRQHandler+0x198>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <DMA2_Stream1_IRQHandler+0x178>)
 8000f3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f3e:	6093      	str	r3, [r2, #8]
	}
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40026400 	.word	0x40026400
 8000f50:	20000208 	.word	0x20000208
 8000f54:	200000f8 	.word	0x200000f8
 8000f58:	20000128 	.word	0x20000128
 8000f5c:	20000150 	.word	0x20000150
 8000f60:	20000158 	.word	0x20000158
 8000f64:	200001f0 	.word	0x200001f0
 8000f68:	200000d0 	.word	0x200000d0
 8000f6c:	20000258 	.word	0x20000258

08000f70 <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 8000f74:	4b3e      	ldr	r3, [pc, #248]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d011      	beq.n	8000fa4 <DMA2_Stream2_IRQHandler+0x34>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000f80:	4b3c      	ldr	r3, [pc, #240]	@ (8001074 <DMA2_Stream2_IRQHandler+0x104>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000f86:	4b3c      	ldr	r3, [pc, #240]	@ (8001078 <DMA2_Stream2_IRQHandler+0x108>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800107c <DMA2_Stream2_IRQHandler+0x10c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 8000f92:	4b3b      	ldr	r3, [pc, #236]	@ (8001080 <DMA2_Stream2_IRQHandler+0x110>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000f98:	4b35      	ldr	r3, [pc, #212]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	4a34      	ldr	r2, [pc, #208]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 8000f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 8000fa4:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d011      	beq.n	8000fd4 <DMA2_Stream2_IRQHandler+0x64>
	{
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000fb0:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <DMA2_Stream2_IRQHandler+0x104>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000fb6:	4b30      	ldr	r3, [pc, #192]	@ (8001078 <DMA2_Stream2_IRQHandler+0x108>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800107c <DMA2_Stream2_IRQHandler+0x10c>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001080 <DMA2_Stream2_IRQHandler+0x110>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000fc8:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	4a28      	ldr	r2, [pc, #160]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 8000fce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fd2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF2)
 8000fd4:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d011      	beq.n	8001004 <DMA2_Stream2_IRQHandler+0x94>
	{
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000fe0:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <DMA2_Stream2_IRQHandler+0x104>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000fe6:	4b24      	ldr	r3, [pc, #144]	@ (8001078 <DMA2_Stream2_IRQHandler+0x108>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8000fec:	4b23      	ldr	r3, [pc, #140]	@ (800107c <DMA2_Stream2_IRQHandler+0x10c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 8000ff2:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <DMA2_Stream2_IRQHandler+0x110>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 8000ffe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001002:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF2)
 8001004:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d011      	beq.n	8001034 <DMA2_Stream2_IRQHandler+0xc4>
	{
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <DMA2_Stream2_IRQHandler+0x104>)
 8001012:	2201      	movs	r2, #1
 8001014:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001016:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <DMA2_Stream2_IRQHandler+0x108>)
 8001018:	2201      	movs	r2, #1
 800101a:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800101c:	4b17      	ldr	r3, [pc, #92]	@ (800107c <DMA2_Stream2_IRQHandler+0x10c>)
 800101e:	2201      	movs	r2, #1
 8001020:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8001022:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <DMA2_Stream2_IRQHandler+0x110>)
 8001024:	2201      	movs	r2, #1
 8001026:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	4a10      	ldr	r2, [pc, #64]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 800102e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001032:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF2)
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d011      	beq.n	8001064 <DMA2_Stream2_IRQHandler+0xf4>
	{
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <DMA2_Stream2_IRQHandler+0x104>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <DMA2_Stream2_IRQHandler+0x108>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <DMA2_Stream2_IRQHandler+0x10c>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <DMA2_Stream2_IRQHandler+0x110>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <DMA2_Stream2_IRQHandler+0x100>)
 800105e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001062:	6093      	str	r3, [r2, #8]
	}
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40026400 	.word	0x40026400
 8001074:	20000130 	.word	0x20000130
 8001078:	20000088 	.word	0x20000088
 800107c:	20000200 	.word	0x20000200
 8001080:	20000260 	.word	0x20000260

08001084 <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 8001088:	4b36      	ldr	r3, [pc, #216]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00e      	beq.n	80010b2 <DMA2_Stream3_IRQHandler+0x2e>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 8001094:	4b34      	ldr	r3, [pc, #208]	@ (8001168 <DMA2_Stream3_IRQHandler+0xe4>)
 8001096:	2201      	movs	r2, #1
 8001098:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 800109a:	4b34      	ldr	r3, [pc, #208]	@ (800116c <DMA2_Stream3_IRQHandler+0xe8>)
 800109c:	2201      	movs	r2, #1
 800109e:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 80010a0:	4b33      	ldr	r3, [pc, #204]	@ (8001170 <DMA2_Stream3_IRQHandler+0xec>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80010a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 80010ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010b0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 80010b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00e      	beq.n	80010dc <DMA2_Stream3_IRQHandler+0x58>
	{
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010be:	4b2a      	ldr	r3, [pc, #168]	@ (8001168 <DMA2_Stream3_IRQHandler+0xe4>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010c4:	4b29      	ldr	r3, [pc, #164]	@ (800116c <DMA2_Stream3_IRQHandler+0xe8>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 80010ca:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <DMA2_Stream3_IRQHandler+0xec>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80010d0:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4a23      	ldr	r2, [pc, #140]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 80010d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010da:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF3)
 80010dc:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00e      	beq.n	8001106 <DMA2_Stream3_IRQHandler+0x82>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <DMA2_Stream3_IRQHandler+0xe4>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 80010ee:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <DMA2_Stream3_IRQHandler+0xe8>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <DMA2_Stream3_IRQHandler+0xec>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	4a19      	ldr	r2, [pc, #100]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 8001100:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001104:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF3)
 8001106:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00e      	beq.n	8001130 <DMA2_Stream3_IRQHandler+0xac>
	{
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <DMA2_Stream3_IRQHandler+0xe4>)
 8001114:	2201      	movs	r2, #1
 8001116:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <DMA2_Stream3_IRQHandler+0xe8>)
 800111a:	2201      	movs	r2, #1
 800111c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <DMA2_Stream3_IRQHandler+0xec>)
 8001120:	2201      	movs	r2, #1
 8001122:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 800112a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800112e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00e      	beq.n	800115a <DMA2_Stream3_IRQHandler+0xd6>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 800113c:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <DMA2_Stream3_IRQHandler+0xe4>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <DMA2_Stream3_IRQHandler+0xe8>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <DMA2_Stream3_IRQHandler+0xec>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <DMA2_Stream3_IRQHandler+0xe0>)
 8001154:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001158:	6093      	str	r3, [r2, #8]
	}
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40026400 	.word	0x40026400
 8001168:	200001e8 	.word	0x200001e8
 800116c:	20000070 	.word	0x20000070
 8001170:	20000268 	.word	0x20000268

08001174 <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 8001178:	4b36      	ldr	r3, [pc, #216]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00e      	beq.n	80011a2 <DMA2_Stream4_IRQHandler+0x2e>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001184:	4b34      	ldr	r3, [pc, #208]	@ (8001258 <DMA2_Stream4_IRQHandler+0xe4>)
 8001186:	2201      	movs	r2, #1
 8001188:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 800118a:	4b34      	ldr	r3, [pc, #208]	@ (800125c <DMA2_Stream4_IRQHandler+0xe8>)
 800118c:	2201      	movs	r2, #1
 800118e:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 8001190:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <DMA2_Stream4_IRQHandler+0xec>)
 8001192:	2201      	movs	r2, #1
 8001194:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8001196:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	4a2e      	ldr	r2, [pc, #184]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 80011a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00e      	beq.n	80011cc <DMA2_Stream4_IRQHandler+0x58>
	{
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <DMA2_Stream4_IRQHandler+0xe4>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011b4:	4b29      	ldr	r3, [pc, #164]	@ (800125c <DMA2_Stream4_IRQHandler+0xe8>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 80011ba:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <DMA2_Stream4_IRQHandler+0xec>)
 80011bc:	2201      	movs	r2, #1
 80011be:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80011c0:	4b24      	ldr	r3, [pc, #144]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF4)
 80011cc:	4b21      	ldr	r3, [pc, #132]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00e      	beq.n	80011f6 <DMA2_Stream4_IRQHandler+0x82>
	{
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 80011d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <DMA2_Stream4_IRQHandler+0xe4>)
 80011da:	2201      	movs	r2, #1
 80011dc:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80011de:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <DMA2_Stream4_IRQHandler+0xe8>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <DMA2_Stream4_IRQHandler+0xec>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	4a19      	ldr	r2, [pc, #100]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF4)
 80011f6:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00e      	beq.n	8001220 <DMA2_Stream4_IRQHandler+0xac>
	{
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <DMA2_Stream4_IRQHandler+0xe4>)
 8001204:	2201      	movs	r2, #1
 8001206:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <DMA2_Stream4_IRQHandler+0xe8>)
 800120a:	2201      	movs	r2, #1
 800120c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <DMA2_Stream4_IRQHandler+0xec>)
 8001210:	2201      	movs	r2, #1
 8001212:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00e      	beq.n	800124a <DMA2_Stream4_IRQHandler+0xd6>
	{
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <DMA2_Stream4_IRQHandler+0xe4>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <DMA2_Stream4_IRQHandler+0xe8>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8001238:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <DMA2_Stream4_IRQHandler+0xec>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800123e:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <DMA2_Stream4_IRQHandler+0xe0>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	60d3      	str	r3, [r2, #12]
	}
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40026400 	.word	0x40026400
 8001258:	20000110 	.word	0x20000110
 800125c:	20000138 	.word	0x20000138
 8001260:	20000270 	.word	0x20000270

08001264 <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8001268:	4b2f      	ldr	r3, [pc, #188]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00b      	beq.n	800128c <DMA2_Stream5_IRQHandler+0x28>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001274:	4b2d      	ldr	r3, [pc, #180]	@ (800132c <DMA2_Stream5_IRQHandler+0xc8>)
 8001276:	2201      	movs	r2, #1
 8001278:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 800127a:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <DMA2_Stream5_IRQHandler+0xcc>)
 800127c:	2201      	movs	r2, #1
 800127e:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001280:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	4a28      	ldr	r2, [pc, #160]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 8001286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800128a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 800128c:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00b      	beq.n	80012b0 <DMA2_Stream5_IRQHandler+0x4c>
	{
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001298:	4b24      	ldr	r3, [pc, #144]	@ (800132c <DMA2_Stream5_IRQHandler+0xc8>)
 800129a:	2201      	movs	r2, #1
 800129c:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 800129e:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <DMA2_Stream5_IRQHandler+0xcc>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80012a4:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 80012aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ae:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF5)
 80012b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <DMA2_Stream5_IRQHandler+0x70>
	{
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <DMA2_Stream5_IRQHandler+0xc8>)
 80012be:	2201      	movs	r2, #1
 80012c0:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 80012c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <DMA2_Stream5_IRQHandler+0xcc>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80012c8:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	4a16      	ldr	r2, [pc, #88]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012d2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF5)
 80012d4:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00b      	beq.n	80012f8 <DMA2_Stream5_IRQHandler+0x94>
	{
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <DMA2_Stream5_IRQHandler+0xc8>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <DMA2_Stream5_IRQHandler+0xcc>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF5)
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00b      	beq.n	800131c <DMA2_Stream5_IRQHandler+0xb8>
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001304:	4b09      	ldr	r3, [pc, #36]	@ (800132c <DMA2_Stream5_IRQHandler+0xc8>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <DMA2_Stream5_IRQHandler+0xcc>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <DMA2_Stream5_IRQHandler+0xc4>)
 8001316:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800131a:	60d3      	str	r3, [r2, #12]
	}
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40026400 	.word	0x40026400
 800132c:	200000f0 	.word	0x200000f0
 8001330:	20000278 	.word	0x20000278

08001334 <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 8001338:	4b45      	ldr	r3, [pc, #276]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d014      	beq.n	800136e <DMA2_Stream6_IRQHandler+0x3a>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001344:	4b43      	ldr	r3, [pc, #268]	@ (8001454 <DMA2_Stream6_IRQHandler+0x120>)
 8001346:	2201      	movs	r2, #1
 8001348:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 800134a:	4b43      	ldr	r3, [pc, #268]	@ (8001458 <DMA2_Stream6_IRQHandler+0x124>)
 800134c:	2201      	movs	r2, #1
 800134e:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001350:	4b42      	ldr	r3, [pc, #264]	@ (800145c <DMA2_Stream6_IRQHandler+0x128>)
 8001352:	2201      	movs	r2, #1
 8001354:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001356:	4b42      	ldr	r3, [pc, #264]	@ (8001460 <DMA2_Stream6_IRQHandler+0x12c>)
 8001358:	2201      	movs	r2, #1
 800135a:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 800135c:	4b41      	ldr	r3, [pc, #260]	@ (8001464 <DMA2_Stream6_IRQHandler+0x130>)
 800135e:	2201      	movs	r2, #1
 8001360:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001362:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	4a3a      	ldr	r2, [pc, #232]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800136c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 800136e:	4b38      	ldr	r3, [pc, #224]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d014      	beq.n	80013a4 <DMA2_Stream6_IRQHandler+0x70>
	{
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 800137a:	4b36      	ldr	r3, [pc, #216]	@ (8001454 <DMA2_Stream6_IRQHandler+0x120>)
 800137c:	2201      	movs	r2, #1
 800137e:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001380:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <DMA2_Stream6_IRQHandler+0x124>)
 8001382:	2201      	movs	r2, #1
 8001384:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001386:	4b35      	ldr	r3, [pc, #212]	@ (800145c <DMA2_Stream6_IRQHandler+0x128>)
 8001388:	2201      	movs	r2, #1
 800138a:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800138c:	4b34      	ldr	r3, [pc, #208]	@ (8001460 <DMA2_Stream6_IRQHandler+0x12c>)
 800138e:	2201      	movs	r2, #1
 8001390:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8001392:	4b34      	ldr	r3, [pc, #208]	@ (8001464 <DMA2_Stream6_IRQHandler+0x130>)
 8001394:	2201      	movs	r2, #1
 8001396:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001398:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4a2c      	ldr	r2, [pc, #176]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 800139e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF6)
 80013a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d014      	beq.n	80013da <DMA2_Stream6_IRQHandler+0xa6>
	{
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80013b0:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <DMA2_Stream6_IRQHandler+0x120>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80013b6:	4b28      	ldr	r3, [pc, #160]	@ (8001458 <DMA2_Stream6_IRQHandler+0x124>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80013bc:	4b27      	ldr	r3, [pc, #156]	@ (800145c <DMA2_Stream6_IRQHandler+0x128>)
 80013be:	2201      	movs	r2, #1
 80013c0:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 80013c2:	4b27      	ldr	r3, [pc, #156]	@ (8001460 <DMA2_Stream6_IRQHandler+0x12c>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <DMA2_Stream6_IRQHandler+0x130>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 80013d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013d8:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF6)
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d014      	beq.n	8001410 <DMA2_Stream6_IRQHandler+0xdc>
	{
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <DMA2_Stream6_IRQHandler+0x120>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <DMA2_Stream6_IRQHandler+0x124>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <DMA2_Stream6_IRQHandler+0x128>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013f8:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <DMA2_Stream6_IRQHandler+0x12c>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <DMA2_Stream6_IRQHandler+0x130>)
 8001400:	2201      	movs	r2, #1
 8001402:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	4a11      	ldr	r2, [pc, #68]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 800140a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800140e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d014      	beq.n	8001446 <DMA2_Stream6_IRQHandler+0x112>
	{
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800141c:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <DMA2_Stream6_IRQHandler+0x120>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <DMA2_Stream6_IRQHandler+0x124>)
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <DMA2_Stream6_IRQHandler+0x128>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <DMA2_Stream6_IRQHandler+0x12c>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <DMA2_Stream6_IRQHandler+0x130>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800143a:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <DMA2_Stream6_IRQHandler+0x11c>)
 8001440:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001444:	60d3      	str	r3, [r2, #12]
	}
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40026400 	.word	0x40026400
 8001454:	20000100 	.word	0x20000100
 8001458:	20000108 	.word	0x20000108
 800145c:	20000140 	.word	0x20000140
 8001460:	200000d8 	.word	0x200000d8
 8001464:	20000280 	.word	0x20000280

08001468 <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 800146c:	4b36      	ldr	r3, [pc, #216]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00e      	beq.n	8001496 <DMA2_Stream7_IRQHandler+0x2e>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001478:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4a32      	ldr	r2, [pc, #200]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 800147e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001482:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001484:	4b31      	ldr	r3, [pc, #196]	@ (800154c <DMA2_Stream7_IRQHandler+0xe4>)
 8001486:	2201      	movs	r2, #1
 8001488:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 800148a:	4b31      	ldr	r3, [pc, #196]	@ (8001550 <DMA2_Stream7_IRQHandler+0xe8>)
 800148c:	2201      	movs	r2, #1
 800148e:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 8001490:	4b30      	ldr	r3, [pc, #192]	@ (8001554 <DMA2_Stream7_IRQHandler+0xec>)
 8001492:	2201      	movs	r2, #1
 8001494:	711a      	strb	r2, [r3, #4]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 8001496:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00e      	beq.n	80014c0 <DMA2_Stream7_IRQHandler+0x58>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80014a2:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	4a28      	ldr	r2, [pc, #160]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 80014a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ac:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014ae:	4b27      	ldr	r3, [pc, #156]	@ (800154c <DMA2_Stream7_IRQHandler+0xe4>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014b4:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <DMA2_Stream7_IRQHandler+0xe8>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 80014ba:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <DMA2_Stream7_IRQHandler+0xec>)
 80014bc:	2201      	movs	r2, #1
 80014be:	70da      	strb	r2, [r3, #3]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF7)
 80014c0:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00e      	beq.n	80014ea <DMA2_Stream7_IRQHandler+0x82>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80014cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 80014d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014d6:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 80014d8:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <DMA2_Stream7_IRQHandler+0xe4>)
 80014da:	2201      	movs	r2, #1
 80014dc:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 80014de:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <DMA2_Stream7_IRQHandler+0xe8>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <DMA2_Stream7_IRQHandler+0xec>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	709a      	strb	r2, [r3, #2]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF7)
 80014ea:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00e      	beq.n	8001514 <DMA2_Stream7_IRQHandler+0xac>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	4a13      	ldr	r2, [pc, #76]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 80014fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001500:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <DMA2_Stream7_IRQHandler+0xe4>)
 8001504:	2201      	movs	r2, #1
 8001506:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <DMA2_Stream7_IRQHandler+0xe8>)
 800150a:	2201      	movs	r2, #1
 800150c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <DMA2_Stream7_IRQHandler+0xec>)
 8001510:	2201      	movs	r2, #1
 8001512:	705a      	strb	r2, [r3, #1]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00e      	beq.n	800153e <DMA2_Stream7_IRQHandler+0xd6>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <DMA2_Stream7_IRQHandler+0xe0>)
 8001526:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800152a:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <DMA2_Stream7_IRQHandler+0xe4>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <DMA2_Stream7_IRQHandler+0xe8>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <DMA2_Stream7_IRQHandler+0xec>)
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]

	}
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40026400 	.word	0x40026400
 800154c:	20000148 	.word	0x20000148
 8001550:	20000090 	.word	0x20000090
 8001554:	20000288 	.word	0x20000288

08001558 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0c      	ldr	r2, [pc, #48]	@ (8001598 <DMA_Clock_Enable+0x40>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d105      	bne.n	8001576 <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <DMA_Clock_Enable+0x44>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <DMA_Clock_Enable+0x44>)
 8001570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <DMA_Clock_Enable+0x48>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d105      	bne.n	800158c <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <DMA_Clock_Enable+0x44>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	4a05      	ldr	r2, [pc, #20]	@ (800159c <DMA_Clock_Enable+0x44>)
 8001586:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800158a:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40026000 	.word	0x40026000
 800159c:	40023800 	.word	0x40023800
 80015a0:	40026400 	.word	0x40026400

080015a4 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ffd3 	bl	8001558 <DMA_Clock_Enable>
    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	6819      	ldr	r1, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7a1b      	ldrb	r3, [r3, #8]
 80015bc:	065a      	lsls	r2, r3, #25
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	6819      	ldr	r1, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	6819      	ldr	r1, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691a      	ldr	r2, [r3, #16]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	430a      	orrs	r2, r1
 8001630:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	2200      	movs	r2, #0
 8001638:	4293      	cmp	r3, r2
 800163a:	f000 80f4 	beq.w	8001826 <DMA_Init+0x282>
    {

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	2280      	movs	r2, #128	@ 0x80
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	61da      	str	r2, [r3, #28]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <DMA_Init+0xc0>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	6959      	ldr	r1, [r3, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69da      	ldr	r2, [r3, #28]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	430a      	orrs	r2, r1
 8001662:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	2210      	movs	r2, #16
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	61da      	str	r2, [r3, #28]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <DMA_Init+0xe4>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f042 0210 	orr.w	r2, r2, #16
 8001686:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	2208      	movs	r2, #8
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	61da      	str	r2, [r3, #28]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <DMA_Init+0x108>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f042 0208 	orr.w	r2, r2, #8
 80016aa:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	2204      	movs	r2, #4
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	61da      	str	r2, [r3, #28]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d007      	beq.n	80016d0 <DMA_Init+0x12c>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f042 0204 	orr.w	r2, r2, #4
 80016ce:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	2202      	movs	r2, #2
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	61da      	str	r2, [r3, #28]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <DMA_Init+0x150>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f042 0202 	orr.w	r2, r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a67      	ldr	r2, [pc, #412]	@ (8001898 <DMA_Init+0x2f4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d147      	bne.n	800178e <DMA_Init+0x1ea>
        {
            if(config->Request.Stream == DMA1_Stream0){
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4a66      	ldr	r2, [pc, #408]	@ (800189c <DMA_Init+0x2f8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d103      	bne.n	8001710 <DMA_Init+0x16c>
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001708:	200b      	movs	r0, #11
 800170a:	f7fe fd5d 	bl	80001c8 <__NVIC_EnableIRQ>
 800170e:	e08a      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4a62      	ldr	r2, [pc, #392]	@ (80018a0 <DMA_Init+0x2fc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d103      	bne.n	8001722 <DMA_Init+0x17e>
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800171a:	200c      	movs	r0, #12
 800171c:	f7fe fd54 	bl	80001c8 <__NVIC_EnableIRQ>
 8001720:	e081      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4a5f      	ldr	r2, [pc, #380]	@ (80018a4 <DMA_Init+0x300>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d103      	bne.n	8001734 <DMA_Init+0x190>
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800172c:	200d      	movs	r0, #13
 800172e:	f7fe fd4b 	bl	80001c8 <__NVIC_EnableIRQ>
 8001732:	e078      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a5b      	ldr	r2, [pc, #364]	@ (80018a8 <DMA_Init+0x304>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d103      	bne.n	8001746 <DMA_Init+0x1a2>
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800173e:	200e      	movs	r0, #14
 8001740:	f7fe fd42 	bl	80001c8 <__NVIC_EnableIRQ>
 8001744:	e06f      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4a58      	ldr	r2, [pc, #352]	@ (80018ac <DMA_Init+0x308>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d103      	bne.n	8001758 <DMA_Init+0x1b4>
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001750:	200f      	movs	r0, #15
 8001752:	f7fe fd39 	bl	80001c8 <__NVIC_EnableIRQ>
 8001756:	e066      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4a54      	ldr	r2, [pc, #336]	@ (80018b0 <DMA_Init+0x30c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d103      	bne.n	800176a <DMA_Init+0x1c6>
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001762:	2010      	movs	r0, #16
 8001764:	f7fe fd30 	bl	80001c8 <__NVIC_EnableIRQ>
 8001768:	e05d      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4a51      	ldr	r2, [pc, #324]	@ (80018b4 <DMA_Init+0x310>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d103      	bne.n	800177c <DMA_Init+0x1d8>
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001774:	2011      	movs	r0, #17
 8001776:	f7fe fd27 	bl	80001c8 <__NVIC_EnableIRQ>
 800177a:	e054      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a4d      	ldr	r2, [pc, #308]	@ (80018b8 <DMA_Init+0x314>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d14f      	bne.n	8001826 <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001786:	202f      	movs	r0, #47	@ 0x2f
 8001788:	f7fe fd1e 	bl	80001c8 <__NVIC_EnableIRQ>
 800178c:	e04b      	b.n	8001826 <DMA_Init+0x282>
            }
        }
        else if(config->Request.Controller == DMA2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a4a      	ldr	r2, [pc, #296]	@ (80018bc <DMA_Init+0x318>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d146      	bne.n	8001826 <DMA_Init+0x282>
        {
            if(config->Request.Stream == DMA2_Stream0){
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4a48      	ldr	r2, [pc, #288]	@ (80018c0 <DMA_Init+0x31c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d103      	bne.n	80017aa <DMA_Init+0x206>
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017a2:	2038      	movs	r0, #56	@ 0x38
 80017a4:	f7fe fd10 	bl	80001c8 <__NVIC_EnableIRQ>
 80017a8:	e03d      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a45      	ldr	r2, [pc, #276]	@ (80018c4 <DMA_Init+0x320>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d103      	bne.n	80017bc <DMA_Init+0x218>
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80017b4:	2039      	movs	r0, #57	@ 0x39
 80017b6:	f7fe fd07 	bl	80001c8 <__NVIC_EnableIRQ>
 80017ba:	e034      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a41      	ldr	r2, [pc, #260]	@ (80018c8 <DMA_Init+0x324>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d103      	bne.n	80017ce <DMA_Init+0x22a>
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017c6:	203a      	movs	r0, #58	@ 0x3a
 80017c8:	f7fe fcfe 	bl	80001c8 <__NVIC_EnableIRQ>
 80017cc:	e02b      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a3e      	ldr	r2, [pc, #248]	@ (80018cc <DMA_Init+0x328>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d103      	bne.n	80017e0 <DMA_Init+0x23c>
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80017d8:	203b      	movs	r0, #59	@ 0x3b
 80017da:	f7fe fcf5 	bl	80001c8 <__NVIC_EnableIRQ>
 80017de:	e022      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a3a      	ldr	r2, [pc, #232]	@ (80018d0 <DMA_Init+0x32c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d103      	bne.n	80017f2 <DMA_Init+0x24e>
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80017ea:	203c      	movs	r0, #60	@ 0x3c
 80017ec:	f7fe fcec 	bl	80001c8 <__NVIC_EnableIRQ>
 80017f0:	e019      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <DMA_Init+0x330>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d103      	bne.n	8001804 <DMA_Init+0x260>
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80017fc:	2044      	movs	r0, #68	@ 0x44
 80017fe:	f7fe fce3 	bl	80001c8 <__NVIC_EnableIRQ>
 8001802:	e010      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a33      	ldr	r2, [pc, #204]	@ (80018d8 <DMA_Init+0x334>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d103      	bne.n	8001816 <DMA_Init+0x272>
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800180e:	2045      	movs	r0, #69	@ 0x45
 8001810:	f7fe fcda 	bl	80001c8 <__NVIC_EnableIRQ>
 8001814:	e007      	b.n	8001826 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a30      	ldr	r2, [pc, #192]	@ (80018dc <DMA_Init+0x338>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d102      	bne.n	8001826 <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001820:	2046      	movs	r0, #70	@ 0x46
 8001822:	f7fe fcd1 	bl	80001c8 <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	8c1b      	ldrh	r3, [r3, #32]
 8001830:	4619      	mov	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001844:	4619      	mov	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001856:	4293      	cmp	r3, r2
 8001858:	d108      	bne.n	800186c <DMA_Init+0x2c8>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e010      	b.n	800188e <DMA_Init+0x2ea>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2200      	movs	r2, #0
 8001872:	4293      	cmp	r3, r2
 8001874:	d108      	bne.n	8001888 <DMA_Init+0x2e4>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e002      	b.n	800188e <DMA_Init+0x2ea>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	e000      	b.n	8001890 <DMA_Init+0x2ec>
    }

    return 1;  // Return 1 on successful initialization
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40026000 	.word	0x40026000
 800189c:	40026010 	.word	0x40026010
 80018a0:	40026028 	.word	0x40026028
 80018a4:	40026040 	.word	0x40026040
 80018a8:	40026058 	.word	0x40026058
 80018ac:	40026070 	.word	0x40026070
 80018b0:	40026088 	.word	0x40026088
 80018b4:	400260a0 	.word	0x400260a0
 80018b8:	400260b8 	.word	0x400260b8
 80018bc:	40026400 	.word	0x40026400
 80018c0:	40026410 	.word	0x40026410
 80018c4:	40026428 	.word	0x40026428
 80018c8:	40026440 	.word	0x40026440
 80018cc:	40026458 	.word	0x40026458
 80018d0:	40026470 	.word	0x40026470
 80018d4:	40026488 	.word	0x40026488
 80018d8:	400264a0 	.word	0x400264a0
 80018dc:	400264b8 	.word	0x400264b8

080018e0 <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    // Clear previous data size and memory increment settings
    config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80018f6:	601a      	str	r2, [r3, #0]

    // Set the peripheral data size
    config -> Request.Stream -> CR |= config -> peripheral_data_size;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	430a      	orrs	r2, r1
 8001908:	601a      	str	r2, [r3, #0]

    // Set the memory data size
    config -> Request.Stream -> CR |= config -> memory_data_size;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	6819      	ldr	r1, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]

    // Set the number of data items to be transferred
    config -> Request.Stream -> NDTR = config -> buffer_length;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	605a      	str	r2, [r3, #4]

    // Set memory pointer increment mode
    config -> Request.Stream -> CR |= config -> memory_pointer_increment;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	8c1b      	ldrh	r3, [r3, #32]
 8001930:	4619      	mov	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

    // Set the memory address
    config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001942:	60da      	str	r2, [r3, #12]

    // Set the peripheral address
    config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800194c:	609a      	str	r2, [r3, #8]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	4a43      	ldr	r2, [pc, #268]	@ (8001a80 <DMA_Set_Trigger+0x124>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d003      	beq.n	8001980 <DMA_Set_Trigger+0x24>
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	4a42      	ldr	r2, [pc, #264]	@ (8001a84 <DMA_Set_Trigger+0x128>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d178      	bne.n	8001a72 <DMA_Set_Trigger+0x116>
    {
        // Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4a41      	ldr	r2, [pc, #260]	@ (8001a88 <DMA_Set_Trigger+0x12c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d918      	bls.n	80019ba <DMA_Set_Trigger+0x5e>
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4a40      	ldr	r2, [pc, #256]	@ (8001a8c <DMA_Set_Trigger+0x130>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d814      	bhi.n	80019ba <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4b3f      	ldr	r3, [pc, #252]	@ (8001a90 <DMA_Set_Trigger+0x134>)
 8001994:	4413      	add	r3, r2
 8001996:	10db      	asrs	r3, r3, #3
 8001998:	4a3e      	ldr	r2, [pc, #248]	@ (8001a94 <DMA_Set_Trigger+0x138>)
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001a98 <DMA_Set_Trigger+0x13c>)
 80019a2:	5c9b      	ldrb	r3, [r3, r2]
 80019a4:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	213f      	movs	r1, #63	@ 0x3f
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	fa01 f202 	lsl.w	r2, r1, r2
 80019b2:	431a      	orrs	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	e055      	b.n	8001a66 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4a37      	ldr	r2, [pc, #220]	@ (8001a9c <DMA_Set_Trigger+0x140>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d918      	bls.n	80019f4 <DMA_Set_Trigger+0x98>
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4a36      	ldr	r2, [pc, #216]	@ (8001aa0 <DMA_Set_Trigger+0x144>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d814      	bhi.n	80019f4 <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4b35      	ldr	r3, [pc, #212]	@ (8001aa4 <DMA_Set_Trigger+0x148>)
 80019ce:	4413      	add	r3, r2
 80019d0:	10db      	asrs	r3, r3, #3
 80019d2:	4a30      	ldr	r2, [pc, #192]	@ (8001a94 <DMA_Set_Trigger+0x138>)
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	4b33      	ldr	r3, [pc, #204]	@ (8001aa8 <DMA_Set_Trigger+0x14c>)
 80019dc:	5c9b      	ldrb	r3, [r3, r2]
 80019de:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	213f      	movs	r1, #63	@ 0x3f
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	431a      	orrs	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	e038      	b.n	8001a66 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4a2d      	ldr	r2, [pc, #180]	@ (8001aac <DMA_Set_Trigger+0x150>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d918      	bls.n	8001a2e <DMA_Set_Trigger+0xd2>
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4a2c      	ldr	r2, [pc, #176]	@ (8001ab0 <DMA_Set_Trigger+0x154>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d814      	bhi.n	8001a2e <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab4 <DMA_Set_Trigger+0x158>)
 8001a08:	4413      	add	r3, r2
 8001a0a:	10db      	asrs	r3, r3, #3
 8001a0c:	4a21      	ldr	r2, [pc, #132]	@ (8001a94 <DMA_Set_Trigger+0x138>)
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <DMA_Set_Trigger+0x13c>)
 8001a16:	5c9b      	ldrb	r3, [r3, r2]
 8001a18:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	213f      	movs	r1, #63	@ 0x3f
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	431a      	orrs	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e01b      	b.n	8001a66 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4a21      	ldr	r2, [pc, #132]	@ (8001ab8 <DMA_Set_Trigger+0x15c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d917      	bls.n	8001a66 <DMA_Set_Trigger+0x10a>
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4a20      	ldr	r2, [pc, #128]	@ (8001abc <DMA_Set_Trigger+0x160>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d813      	bhi.n	8001a66 <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac0 <DMA_Set_Trigger+0x164>)
 8001a42:	4413      	add	r3, r2
 8001a44:	10db      	asrs	r3, r3, #3
 8001a46:	4a13      	ldr	r2, [pc, #76]	@ (8001a94 <DMA_Set_Trigger+0x138>)
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <DMA_Set_Trigger+0x14c>)
 8001a50:	5c9b      	ldrb	r3, [r3, r2]
 8001a52:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	213f      	movs	r1, #63	@ 0x3f
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a60:	431a      	orrs	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f043 0201 	orr.w	r2, r3, #1
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	601a      	str	r2, [r3, #0]
    }
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40026000 	.word	0x40026000
 8001a84:	40026400 	.word	0x40026400
 8001a88:	4002600f 	.word	0x4002600f
 8001a8c:	40026058 	.word	0x40026058
 8001a90:	bffd9ff0 	.word	0xbffd9ff0
 8001a94:	aaaaaaab 	.word	0xaaaaaaab
 8001a98:	0800222c 	.word	0x0800222c
 8001a9c:	4002606f 	.word	0x4002606f
 8001aa0:	400260b8 	.word	0x400260b8
 8001aa4:	bffd9f90 	.word	0xbffd9f90
 8001aa8:	08002230 	.word	0x08002230
 8001aac:	4002640f 	.word	0x4002640f
 8001ab0:	40026458 	.word	0x40026458
 8001ab4:	bffd9bf0 	.word	0xbffd9bf0
 8001ab8:	4002646f 	.word	0x4002646f
 8001abc:	400264b8 	.word	0x400264b8
 8001ac0:	bffd9b90 	.word	0xbffd9b90

08001ac4 <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a25      	ldr	r2, [pc, #148]	@ (8001b64 <GPIO_Clock_Enable+0xa0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d106      	bne.n	8001ae2 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad8:	4a23      	ldr	r2, [pc, #140]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae0:	e039      	b.n	8001b56 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a21      	ldr	r2, [pc, #132]	@ (8001b6c <GPIO_Clock_Enable+0xa8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d106      	bne.n	8001af8 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8001aea:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	e02e      	b.n	8001b56 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a1d      	ldr	r2, [pc, #116]	@ (8001b70 <GPIO_Clock_Enable+0xac>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d106      	bne.n	8001b0e <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b04:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0c:	e023      	b.n	8001b56 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a18      	ldr	r2, [pc, #96]	@ (8001b74 <GPIO_Clock_Enable+0xb0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d106      	bne.n	8001b24 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8001b16:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a13      	ldr	r2, [pc, #76]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	e018      	b.n	8001b56 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a14      	ldr	r2, [pc, #80]	@ (8001b78 <GPIO_Clock_Enable+0xb4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d106      	bne.n	8001b3a <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001b32:	f043 0310 	orr.w	r3, r3, #16
 8001b36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b38:	e00d      	b.n	8001b56 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <GPIO_Clock_Enable+0xb8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d106      	bne.n	8001b50 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a08      	ldr	r2, [pc, #32]	@ (8001b68 <GPIO_Clock_Enable+0xa4>)
 8001b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	e002      	b.n	8001b56 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	e000      	b.n	8001b58 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40021c00 	.word	0x40021c00

08001b80 <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	4608      	mov	r0, r1
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	70fb      	strb	r3, [r7, #3]
 8001b92:	460b      	mov	r3, r1
 8001b94:	70bb      	strb	r3, [r7, #2]
 8001b96:	4613      	mov	r3, r2
 8001b98:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ff92 	bl	8001ac4 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	78b9      	ldrb	r1, [r7, #2]
 8001ba6:	78fa      	ldrb	r2, [r7, #3]
 8001ba8:	0052      	lsls	r2, r2, #1
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	787b      	ldrb	r3, [r7, #1]
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d008      	beq.n	8001bce <GPIO_Pin_Init+0x4e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	7879      	ldrb	r1, [r7, #1]
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 8001bce:	2204      	movs	r2, #4
 8001bd0:	7c3b      	ldrb	r3, [r7, #16]
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d009      	beq.n	8001bea <GPIO_Pin_Init+0x6a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	7c39      	ldrb	r1, [r7, #16]
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	0052      	lsls	r2, r2, #1
 8001be0:	fa01 f202 	lsl.w	r2, r1, r2
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 8001bea:	2204      	movs	r2, #4
 8001bec:	7d3b      	ldrb	r3, [r7, #20]
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d009      	beq.n	8001c06 <GPIO_Pin_Init+0x86>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	7d39      	ldrb	r1, [r7, #20]
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	0052      	lsls	r2, r2, #1
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	2b07      	cmp	r3, #7
 8001c0a:	d80a      	bhi.n	8001c22 <GPIO_Pin_Init+0xa2>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	7e39      	ldrb	r1, [r7, #24]
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8001c20:	e00a      	b.n	8001c38 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	7e39      	ldrb	r1, [r7, #24]
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	3a08      	subs	r2, #8
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	@ (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	@ (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ffc2 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	uint8_t pll_m = 8;
 8001cde:	2308      	movs	r3, #8
 8001ce0:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8001ce2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ce6:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8001cec:	2307      	movs	r3, #7
 8001cee:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8001d02:	bf00      	nop
 8001d04:	4b38      	ldr	r3, [pc, #224]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f9      	beq.n	8001d04 <MCU_Clock_Setup+0x2c>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8001d10:	4b35      	ldr	r3, [pc, #212]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	4a34      	ldr	r2, [pc, #208]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8001d1c:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <MCU_Clock_Setup+0x114>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a32      	ldr	r2, [pc, #200]	@ (8001dec <MCU_Clock_Setup+0x114>)
 8001d22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d26:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001d28:	4b31      	ldr	r3, [pc, #196]	@ (8001df0 <MCU_Clock_Setup+0x118>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a30      	ldr	r2, [pc, #192]	@ (8001df0 <MCU_Clock_Setup+0x118>)
 8001d2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d32:	f043 0305 	orr.w	r3, r3, #5
 8001d36:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001d38:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	78ba      	ldrb	r2, [r7, #2]
 8001d3e:	0611      	lsls	r1, r2, #24
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	0412      	lsls	r2, r2, #16
 8001d44:	4311      	orrs	r1, r2
 8001d46:	88ba      	ldrh	r2, [r7, #4]
 8001d48:	0192      	lsls	r2, r2, #6
 8001d4a:	4311      	orrs	r1, r2
 8001d4c:	79fa      	ldrb	r2, [r7, #7]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	4611      	mov	r1, r2
 8001d52:	4a25      	ldr	r2, [pc, #148]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8001d58:	4b23      	ldr	r3, [pc, #140]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a22      	ldr	r2, [pc, #136]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d62:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8001d64:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d66:	4a20      	ldr	r2, [pc, #128]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a1d      	ldr	r2, [pc, #116]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d72:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8001d76:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d82:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 8001d84:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d8e:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001d90:	bf00      	nop
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f9      	beq.n	8001d92 <MCU_Clock_Setup+0xba>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001d9e:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4a11      	ldr	r2, [pc, #68]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001daa:	bf00      	nop
 8001dac:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d1f9      	bne.n	8001dac <MCU_Clock_Setup+0xd4>
	SystemCoreClockUpdate();
 8001db8:	f000 f95e 	bl	8002078 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <MCU_Clock_Setup+0x11c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <MCU_Clock_Setup+0x120>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff62 	bl	8001c94 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd4:	4a04      	ldr	r2, [pc, #16]	@ (8001de8 <MCU_Clock_Setup+0x110>)
 8001dd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dda:	6453      	str	r3, [r2, #68]	@ 0x44
	SystemInit();
 8001ddc:	f000 f93a 	bl	8002054 <SystemInit>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40007000 	.word	0x40007000
 8001df0:	40023c00 	.word	0x40023c00
 8001df4:	20000000 	.word	0x20000000
 8001df8:	18618619 	.word	0x18618619

08001dfc <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <Delay_Config+0x2c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8001e06:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <Delay_Config+0x2c>)
 8001e08:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001e0c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <Delay_Config+0x2c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001e14:	4b04      	ldr	r3, [pc, #16]	@ (8001e28 <Delay_Config+0x2c>)
 8001e16:	2205      	movs	r2, #5
 8001e18:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <main>:

uint32_t signal1[10];


int main(void)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 8001e32:	f7ff ff51 	bl	8001cd8 <MCU_Clock_Setup>
	Delay_Config();
 8001e36:	f7ff ffe1 	bl	8001dfc <Delay_Config>

	GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	2303      	movs	r3, #3
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	9102      	str	r1, [sp, #8]
 8001e46:	9201      	str	r2, [sp, #4]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	4623      	mov	r3, r4
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4879      	ldr	r0, [pc, #484]	@ (8002038 <main+0x20c>)
 8001e52:	f7ff fe95 	bl	8001b80 <GPIO_Pin_Init>
	GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 8001e56:	2001      	movs	r0, #1
 8001e58:	2400      	movs	r4, #0
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	9102      	str	r1, [sp, #8]
 8001e62:	9201      	str	r2, [sp, #4]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	4623      	mov	r3, r4
 8001e68:	4602      	mov	r2, r0
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4872      	ldr	r0, [pc, #456]	@ (8002038 <main+0x20c>)
 8001e6e:	f7ff fe87 	bl	8001b80 <GPIO_Pin_Init>
	GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 8001e72:	2001      	movs	r0, #1
 8001e74:	2400      	movs	r4, #0
 8001e76:	2303      	movs	r3, #3
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	9102      	str	r1, [sp, #8]
 8001e7e:	9201      	str	r2, [sp, #4]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	4623      	mov	r3, r4
 8001e84:	4602      	mov	r2, r0
 8001e86:	2102      	movs	r1, #2
 8001e88:	486b      	ldr	r0, [pc, #428]	@ (8002038 <main+0x20c>)
 8001e8a:	f7ff fe79 	bl	8001b80 <GPIO_Pin_Init>
	GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 8001e8e:	2001      	movs	r0, #1
 8001e90:	2400      	movs	r4, #0
 8001e92:	2303      	movs	r3, #3
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	9102      	str	r1, [sp, #8]
 8001e9a:	9201      	str	r2, [sp, #4]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	2103      	movs	r1, #3
 8001ea4:	4864      	ldr	r0, [pc, #400]	@ (8002038 <main+0x20c>)
 8001ea6:	f7ff fe6b 	bl	8001b80 <GPIO_Pin_Init>
	GPIO_Pin_Init(GPIOA, 4, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	2400      	movs	r4, #0
 8001eae:	2303      	movs	r3, #3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	9102      	str	r1, [sp, #8]
 8001eb6:	9201      	str	r2, [sp, #4]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	4623      	mov	r3, r4
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	485d      	ldr	r0, [pc, #372]	@ (8002038 <main+0x20c>)
 8001ec2:	f7ff fe5d 	bl	8001b80 <GPIO_Pin_Init>
	GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	2400      	movs	r4, #0
 8001eca:	2303      	movs	r3, #3
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	9102      	str	r1, [sp, #8]
 8001ed2:	9201      	str	r2, [sp, #4]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	4602      	mov	r2, r0
 8001eda:	2105      	movs	r1, #5
 8001edc:	4856      	ldr	r0, [pc, #344]	@ (8002038 <main+0x20c>)
 8001ede:	f7ff fe4f 	bl	8001b80 <GPIO_Pin_Init>

	uint32_t temp1 = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
	uint32_t temp2 = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	603b      	str	r3, [r7, #0]

	temp1 = 0b001001;
 8001eea:	2309      	movs	r3, #9
 8001eec:	607b      	str	r3, [r7, #4]
	temp2 = ~temp1 & 0b111111;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ef6:	603b      	str	r3, [r7, #0]
	signal1[0] = temp2 << 16 | temp1;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	041a      	lsls	r2, r3, #16
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	4a4e      	ldr	r2, [pc, #312]	@ (800203c <main+0x210>)
 8001f02:	6013      	str	r3, [r2, #0]

	temp1 = 0b100001;
 8001f04:	2321      	movs	r3, #33	@ 0x21
 8001f06:	607b      	str	r3, [r7, #4]
	temp2 = ~temp1 & 0b111111;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f10:	603b      	str	r3, [r7, #0]
	signal1[1] = (temp2 << 16) | temp1;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	041a      	lsls	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	4a48      	ldr	r2, [pc, #288]	@ (800203c <main+0x210>)
 8001f1c:	6053      	str	r3, [r2, #4]

	temp1 = 0b100100;
 8001f1e:	2324      	movs	r3, #36	@ 0x24
 8001f20:	607b      	str	r3, [r7, #4]
	temp2 = ~temp1 & 0b111111;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f2a:	603b      	str	r3, [r7, #0]
	signal1[2] = (temp2 << 16) | temp1;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	041a      	lsls	r2, r3, #16
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	4a41      	ldr	r2, [pc, #260]	@ (800203c <main+0x210>)
 8001f36:	6093      	str	r3, [r2, #8]

	temp1 = 0b000110;
 8001f38:	2306      	movs	r3, #6
 8001f3a:	607b      	str	r3, [r7, #4]
	temp2 = ~temp1 & 0b111111;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f44:	603b      	str	r3, [r7, #0]
	signal1[3] = (temp2 << 16) | temp1;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	041a      	lsls	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	4a3b      	ldr	r2, [pc, #236]	@ (800203c <main+0x210>)
 8001f50:	60d3      	str	r3, [r2, #12]

	temp1 = 0b010010;
 8001f52:	2312      	movs	r3, #18
 8001f54:	607b      	str	r3, [r7, #4]
	temp2 = ~temp1 & 0b111111;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f5e:	603b      	str	r3, [r7, #0]
	signal1[4] = (temp2 << 16) | temp1;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	041a      	lsls	r2, r3, #16
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	4a34      	ldr	r2, [pc, #208]	@ (800203c <main+0x210>)
 8001f6a:	6113      	str	r3, [r2, #16]

	temp1 = 0b011000;
 8001f6c:	2318      	movs	r3, #24
 8001f6e:	607b      	str	r3, [r7, #4]
	temp2 = ~temp1 & 0b111111;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f78:	603b      	str	r3, [r7, #0]
	signal1[5] = (temp2 << 16) | temp1;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	4a2e      	ldr	r2, [pc, #184]	@ (800203c <main+0x210>)
 8001f84:	6153      	str	r3, [r2, #20]


	RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001f86:	4b2e      	ldr	r3, [pc, #184]	@ (8002040 <main+0x214>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002040 <main+0x214>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM3 -> PSC = 8400;
 8001f92:	4b2c      	ldr	r3, [pc, #176]	@ (8002044 <main+0x218>)
 8001f94:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001f98:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3 -> ARR = 1000;
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002044 <main+0x218>)
 8001f9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3 -> DIER |= TIM_DIER_UDE;
 8001fa2:	4b28      	ldr	r3, [pc, #160]	@ (8002044 <main+0x218>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4a27      	ldr	r2, [pc, #156]	@ (8002044 <main+0x218>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fac:	60d3      	str	r3, [r2, #12]

	Stepper_Motor_1.Request = DMA_Configuration.Request.TIM3_UP;
 8001fae:	4a26      	ldr	r2, [pc, #152]	@ (8002048 <main+0x21c>)
 8001fb0:	4b26      	ldr	r3, [pc, #152]	@ (800204c <main+0x220>)
 8001fb2:	4614      	mov	r4, r2
 8001fb4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001fb8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Stepper_Motor_1.buffer_length = 10;
 8001fc0:	4b21      	ldr	r3, [pc, #132]	@ (8002048 <main+0x21c>)
 8001fc2:	220a      	movs	r2, #10
 8001fc4:	869a      	strh	r2, [r3, #52]	@ 0x34
	Stepper_Motor_1.circular_mode = DMA_Configuration.Circular_Mode.Enable;
 8001fc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fca:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <main+0x21c>)
 8001fcc:	619a      	str	r2, [r3, #24]
	Stepper_Motor_1.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <main+0x21c>)
 8001fd2:	60da      	str	r2, [r3, #12]
	Stepper_Motor_1.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <main+0x21c>)
 8001fd8:	61da      	str	r2, [r3, #28]
	Stepper_Motor_1.memory_address = (uint32_t)&signal1[0];
 8001fda:	4a18      	ldr	r2, [pc, #96]	@ (800203c <main+0x210>)
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <main+0x21c>)
 8001fde:	631a      	str	r2, [r3, #48]	@ 0x30
	Stepper_Motor_1.memory_data_size = DMA_Configuration.Memory_Data_Size.word;
 8001fe0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fe4:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <main+0x21c>)
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
	Stepper_Motor_1.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8001fe8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <main+0x21c>)
 8001ff0:	841a      	strh	r2, [r3, #32]
	Stepper_Motor_1.peripheral_address = (uint32_t)&(GPIOA->BSRR);
 8001ff2:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <main+0x21c>)
 8001ff4:	4a16      	ldr	r2, [pc, #88]	@ (8002050 <main+0x224>)
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
	Stepper_Motor_1.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.word;
 8001ff8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ffc:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <main+0x21c>)
 8001ffe:	625a      	str	r2, [r3, #36]	@ 0x24
	Stepper_Motor_1.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002000:	2300      	movs	r3, #0
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <main+0x21c>)
 8002006:	845a      	strh	r2, [r3, #34]	@ 0x22
	Stepper_Motor_1.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002008:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <main+0x21c>)
 800200e:	615a      	str	r2, [r3, #20]
	Stepper_Motor_1.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002010:	2240      	movs	r2, #64	@ 0x40
 8002012:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <main+0x21c>)
 8002014:	611a      	str	r2, [r3, #16]

	DMA_Init(&Stepper_Motor_1);
 8002016:	480c      	ldr	r0, [pc, #48]	@ (8002048 <main+0x21c>)
 8002018:	f7ff fac4 	bl	80015a4 <DMA_Init>
	DMA_Set_Target(&Stepper_Motor_1);
 800201c:	480a      	ldr	r0, [pc, #40]	@ (8002048 <main+0x21c>)
 800201e:	f7ff fc5f 	bl	80018e0 <DMA_Set_Target>
	DMA_Set_Trigger(&Stepper_Motor_1);
 8002022:	4809      	ldr	r0, [pc, #36]	@ (8002048 <main+0x21c>)
 8002024:	f7ff fc9a 	bl	800195c <DMA_Set_Trigger>

	TIM3 -> CR1 |= TIM_CR1_CEN;
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <main+0x218>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <main+0x218>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6013      	str	r3, [r2, #0]



    /* Loop forever */
	for(;;)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <main+0x208>
 8002038:	40020000 	.word	0x40020000
 800203c:	200002c8 	.word	0x200002c8
 8002040:	40023800 	.word	0x40023800
 8002044:	40000400 	.word	0x40000400
 8002048:	20000290 	.word	0x20000290
 800204c:	08002234 	.word	0x08002234
 8002050:	40020018 	.word	0x40020018

08002054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <SystemInit+0x20>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205e:	4a05      	ldr	r2, [pc, #20]	@ (8002074 <SystemInit+0x20>)
 8002060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	2302      	movs	r3, #2
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	2302      	movs	r3, #2
 8002090:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002092:	4b34      	ldr	r3, [pc, #208]	@ (8002164 <SystemCoreClockUpdate+0xec>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d011      	beq.n	80020c6 <SystemCoreClockUpdate+0x4e>
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d844      	bhi.n	8002132 <SystemCoreClockUpdate+0xba>
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <SystemCoreClockUpdate+0x3e>
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d004      	beq.n	80020be <SystemCoreClockUpdate+0x46>
 80020b4:	e03d      	b.n	8002132 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80020b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002168 <SystemCoreClockUpdate+0xf0>)
 80020b8:	4a2c      	ldr	r2, [pc, #176]	@ (800216c <SystemCoreClockUpdate+0xf4>)
 80020ba:	601a      	str	r2, [r3, #0]
      break;
 80020bc:	e03d      	b.n	800213a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80020be:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <SystemCoreClockUpdate+0xf0>)
 80020c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002170 <SystemCoreClockUpdate+0xf8>)
 80020c2:	601a      	str	r2, [r3, #0]
      break;
 80020c4:	e039      	b.n	800213a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80020c6:	4b27      	ldr	r3, [pc, #156]	@ (8002164 <SystemCoreClockUpdate+0xec>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	0d9b      	lsrs	r3, r3, #22
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d2:	4b24      	ldr	r3, [pc, #144]	@ (8002164 <SystemCoreClockUpdate+0xec>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020da:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80020e2:	4a23      	ldr	r2, [pc, #140]	@ (8002170 <SystemCoreClockUpdate+0xf8>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002164 <SystemCoreClockUpdate+0xec>)
 80020ec:	6852      	ldr	r2, [r2, #4]
 80020ee:	0992      	lsrs	r2, r2, #6
 80020f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e00b      	b.n	8002114 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80020fc:	4a1b      	ldr	r2, [pc, #108]	@ (800216c <SystemCoreClockUpdate+0xf4>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	4a17      	ldr	r2, [pc, #92]	@ (8002164 <SystemCoreClockUpdate+0xec>)
 8002106:	6852      	ldr	r2, [r2, #4]
 8002108:	0992      	lsrs	r2, r2, #6
 800210a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002114:	4b13      	ldr	r3, [pc, #76]	@ (8002164 <SystemCoreClockUpdate+0xec>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	3301      	adds	r3, #1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	4a0e      	ldr	r2, [pc, #56]	@ (8002168 <SystemCoreClockUpdate+0xf0>)
 800212e:	6013      	str	r3, [r2, #0]
      break;
 8002130:	e003      	b.n	800213a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002132:	4b0d      	ldr	r3, [pc, #52]	@ (8002168 <SystemCoreClockUpdate+0xf0>)
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <SystemCoreClockUpdate+0xf4>)
 8002136:	601a      	str	r2, [r3, #0]
      break;
 8002138:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <SystemCoreClockUpdate+0xec>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	4a0b      	ldr	r2, [pc, #44]	@ (8002174 <SystemCoreClockUpdate+0xfc>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <SystemCoreClockUpdate+0xf0>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <SystemCoreClockUpdate+0xf0>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40023800 	.word	0x40023800
 8002168:	20000000 	.word	0x20000000
 800216c:	00f42400 	.word	0x00f42400
 8002170:	017d7840 	.word	0x017d7840
 8002174:	08002630 	.word	0x08002630

08002178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800217a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800217c:	f7ff ff6a 	bl	8002054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002180:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002182:	490d      	ldr	r1, [pc, #52]	@ (80021b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <LoopForever+0xe>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002198:	4c0a      	ldr	r4, [pc, #40]	@ (80021c4 <LoopForever+0x16>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021a6:	f000 f811 	bl	80021cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021aa:	f7ff fe3f 	bl	8001e2c <main>

080021ae <LoopForever>:

LoopForever:
  b LoopForever
 80021ae:	e7fe      	b.n	80021ae <LoopForever>
  ldr   r0, =_estack
 80021b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80021bc:	08002648 	.word	0x08002648
  ldr r2, =_sbss
 80021c0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80021c4:	200002f0 	.word	0x200002f0

080021c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC_IRQHandler>
	...

080021cc <__libc_init_array>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	4d0d      	ldr	r5, [pc, #52]	@ (8002204 <__libc_init_array+0x38>)
 80021d0:	4c0d      	ldr	r4, [pc, #52]	@ (8002208 <__libc_init_array+0x3c>)
 80021d2:	1b64      	subs	r4, r4, r5
 80021d4:	10a4      	asrs	r4, r4, #2
 80021d6:	2600      	movs	r6, #0
 80021d8:	42a6      	cmp	r6, r4
 80021da:	d109      	bne.n	80021f0 <__libc_init_array+0x24>
 80021dc:	4d0b      	ldr	r5, [pc, #44]	@ (800220c <__libc_init_array+0x40>)
 80021de:	4c0c      	ldr	r4, [pc, #48]	@ (8002210 <__libc_init_array+0x44>)
 80021e0:	f000 f818 	bl	8002214 <_init>
 80021e4:	1b64      	subs	r4, r4, r5
 80021e6:	10a4      	asrs	r4, r4, #2
 80021e8:	2600      	movs	r6, #0
 80021ea:	42a6      	cmp	r6, r4
 80021ec:	d105      	bne.n	80021fa <__libc_init_array+0x2e>
 80021ee:	bd70      	pop	{r4, r5, r6, pc}
 80021f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021f4:	4798      	blx	r3
 80021f6:	3601      	adds	r6, #1
 80021f8:	e7ee      	b.n	80021d8 <__libc_init_array+0xc>
 80021fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80021fe:	4798      	blx	r3
 8002200:	3601      	adds	r6, #1
 8002202:	e7f2      	b.n	80021ea <__libc_init_array+0x1e>
 8002204:	08002640 	.word	0x08002640
 8002208:	08002640 	.word	0x08002640
 800220c:	08002640 	.word	0x08002640
 8002210:	08002644 	.word	0x08002644

08002214 <_init>:
 8002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002216:	bf00      	nop
 8002218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221a:	bc08      	pop	{r3}
 800221c:	469e      	mov	lr, r3
 800221e:	4770      	bx	lr

08002220 <_fini>:
 8002220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002222:	bf00      	nop
 8002224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002226:	bc08      	pop	{r3}
 8002228:	469e      	mov	lr, r3
 800222a:	4770      	bx	lr
